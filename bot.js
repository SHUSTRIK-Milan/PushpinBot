//
// –ü–ï–†–ï–ú–ï–ù–ù–´–ï
//


// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
const { Client, Intents } = require('discord.js');
const client = new Client({ intents: [
"GUILDS",
"GUILD_MEMBERS",
"GUILD_BANS",
"GUILD_EMOJIS_AND_STICKERS",
"GUILD_INTEGRATIONS",
"GUILD_WEBHOOKS",
"GUILD_INVITES",
"GUILD_VOICE_STATES",
"GUILD_PRESENCES",
"GUILD_MESSAGES",
"GUILD_MESSAGE_REACTIONS",
"GUILD_MESSAGE_TYPING",
"DIRECT_MESSAGES",
"DIRECT_MESSAGE_REACTIONS",
"DIRECT_MESSAGE_TYPING"
]});

const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v9');

const Config = require('./config')

// –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const prefix = '!'
const BDpref = '^'
var waitingOutputRoflBot = false
const timeOfDelete = 350

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var guild
var guildAges
var guildBD
var rpGuilds = [Config.guilds.ages]

// –ì–∏—Ç—Ö–∞–±
var GitHub = require('github-api')
var gitA = new GitHub({
    token: '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'
});
var fork = gitA.getRepo('SHUSTRIK-Milan','PushpinBot')

//
// –ì–õ–ê–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
//

function cmdParametrs(content,countS){
    var comand = {
        com: '0', arg: '0', sarg: '0', carg: '0', oarg: '0', barg: '0'
    }

    if(countS == undefined) countS = 0
    if(content.slice(0,1) != prefix) return comand

    let regexp = /"(\\.|[^"\\])*"/g;
    
    let com = content.split(" ")[0].slice(prefix.length)
    let arg = content.slice(com.length+prefix.length+1)
    let sarg = arg.split(" ")
    let carg = sarg.slice(countS).join(' ')
    let oarg = arg.match(/"(\\.|[^"\\])*"/g)
    let barg = arg.match(/{"}(\\.|[^{}\\])*{"}/g)
    if(oarg != undefined){for(let i = 0; i < oarg.length; i++){
        oarg[i] = oarg[i].replace(/"/g, "")
    }}else{oarg='null'}
    if(barg != undefined){for(let i = 0; i < barg.length; i++){
        barg[i] = barg[i].replace(/{"}/g, "")
    }}else{barg='null'}
    comand = {
        com: com, // –∫–æ–º–∞–Ω–¥–∞, –ø–µ—Ä–≤—ã–π —Å–ª–∏—Ç–Ω–æ–Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        arg: arg, // –≤—Å–µ, —á—Ç–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        sarg: sarg, // —Ä–∞–∑–±–∏—Ç—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
        carg: carg, // –æ—Ç—Ä–µ–∑–∞–Ω–Ω–∏–µ –æ—Ç —Ä–∞–∑–±–∏—Ç–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø–µ—Ä–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        oarg: oarg, // –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        barg: barg, // –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    };

    return comand
};

function random(min, max) {
    let rand = min + Math.random() * (max + 1 - min);
    return Math.floor(rand);
}

function haveRole(member, role){
    if(member == undefined){return false}
    if(member.roles.cache.get(role) != null){
        return true
    }else if(member.roles.cache.find(roleF => roleF.name.toLowerCase() == role.toLowerCase()) != null){
        return true
    }
    return false
};

function giveRole(member, roleId){
    member.roles.add(roleId, `–î–æ–±–∞–≤–∏–ª —Ä–æ–ª—å –ø–æ–¥ ID: ${roleId}.`).catch(console.error);
};

function removeRole(member, roleId){
    member.roles.remove(roleId, `–£–¥–∞–ª–∏–ª —Ä–æ–ª—å –ø–æ–¥ ID: ${roleId}.`).catch(console.error);
};

//
// CREATE –§–£–ù–ö–¶–ò–ò
//

async function sendLog(member,channel,cat,act,status,add){
    if (cat == 'admin'){var color = 4105807; var path = Config.channelsID.admin}
    if (cat == 'other'){var color = 11645371; var path = Config.channelsID.other}
    if (cat == 'rp'){var color = 11382073; var path = Config.channelsID.rp}
    let nick = member.nickname
    if(nick == null) nick = '<–ë–µ–∑ –∏–º–µ–Ω–∏>'
    let chnlLink = ''
    if(channel != undefined) chnlLink = `\n[<#${channel.id}>]`

    path = guild.channels.cache.get(path)
    let webhook = await path.fetchWebhooks()
    webhook = webhook.first()

    if (status == 0) status = 'üü©'
    if (status == 1) status = 'üü•'
    
    webhook.send({
        embeds: [{
            color: color,
            author: {
                name: `${member.user.username} ‚Äì ${nick}`,
                icon_url: member.user.avatarURL()
            },
            description: `${status} **|** **${act}:**\n${add}${chnlLink}`
        }],
    });
};

async function createLore(title,img,desc,message){
    message.channel.send({embeds: [{
            color: 15521158,
            fields: [{
                name: `${title}`,
                value: `${desc}`
            }],
            image:{url:img}
        }]
    });
    return;
};

async function createEx(rule,num,status,add,message){
    if (status == 0){status = 'üü©'; var color = 9819812}
    if (status == 1){status = 'üü•'; var color = 14508910}

    message.channel.send({embeds: [{
            color: color,
            fields: [{
                name: `\\${status} ${rule} [–ü—Ä–∏–º–µ—Ä #${num}]`,
                value: `${add}`
            }]
        }]
    });
    return;
};

async function createCom(embd, message){
    let CChannel = guild.channels.cache.get(Config.channelsID.dev_process)
    let webhook = await CChannel.fetchWebhooks()
    webhook = webhook.find(web => web.id == '906144022588956692')

    for(let a of embd.title.split(':')){
        if(a.slice(-6) == 'closed') var act = 'merge';
        if(a.slice(-7) == 'commits' || a.slice(-6) == 'commit') var act = 'commit';
    };

    if(act == 'commit'){
        let nTitle = embd.title.split(' ')[0].split(':')[1].slice();
        let branch = nTitle.slice(0,nTitle.length-1);
        let commits = await fork.listCommits({sha:branch});
        message.delete()
        let countC = parseInt(embd.title.split(' ')[1]);
        let lastcom = await commits.data[countC-1];

        let nCommits = [];
        for (let i = countC-1; i > -1; i--) {
            lastcom = await commits.data[i]
            nCommits.push(`[\`${lastcom.html_url.slice(52).slice(0,7)}\`](${lastcom.html_url}) ‚Äî ${lastcom.commit.message}`);
        }

        let color = 11645371
        if(countC>0) color = 8506509
        
        webhook.send({
            embeds: [{
                title: `[PushpinBot:${branch}] ${countC} –∫–æ–º–º–∏—Ç(–æ–≤).`,
                description: nCommits.join('\n'),
                url: lastcom.html_url,
                color: color,
                author: {
                    name: lastcom.author.login,
                    icon_url: lastcom.author.avatar_url
                },
                fields: [],
                timestamp: new Date()
            }]
        })
    }else if(act == 'merge'){
        let req = await fork.listPullRequests({state:'close'})
        let lastReq = await req.data[0];
        message.delete();
        webhook.send({
            embeds: [{
                title: `[PushpinBot:${lastReq.head.ref}] –ù–æ–≤–æ–µ —Å–ª–∏—è–Ω–∏–µ –≤–µ—Ç–æ–∫.`,
                description: `\`(${lastReq.head.ref} ‚Üí ${lastReq.base.ref})\` ${lastReq.title}`,
                url: lastReq.url,
                color: 13158471,
                author: {
                    name: lastReq.user.login,
                    icon_url: lastReq.user.avatar_url
                },
                fields: [],
                timestamp: new Date()
            }]
        })
    }
    return
}

//
// –ë–ê–ó–ê –î–ê–ù–ù–´–•
//

function memberBD(id, user, data) {
    this.id = id
    this.user = user
    this.data = data
}

async function GStats(allpath){
    try{
    var project = allpath.split('/')[0]
    var path = allpath.split('/')[1]

    var cat = guildBD.channels.cache.find(chl => chl.name.toLowerCase() == project.toLowerCase() && chl.type == "GUILD_CATEGORY")
    var chl = cat.children.find(chl => chl.name.toLowerCase() == path.toLowerCase())
    var msgs = await chl.messages.fetch()
    var users = []

    for (let [id, msg] of msgs){
        let cMsg = eval(msg.content)
        cMsg[0].mid = msg.id
        users = users.concat(cMsg)
    }
    return users.reverse()
    }catch{
        guildBD.channels.cache.get('920291811614916609').send(`–û—à–∏–±–∫–∞.\n> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ **[–ø—É—Ç—å]**`).then(msg => {
            setTimeout(() => {msg.delete()}, 10000)
        })
    }
}

async function AStats(allpath, user, data){
    try{
    var project = allpath.split('/')[0]
    var path = allpath.split('/')[1]
    var structure = Config.BDs[`${project}_${path}`]

    var cat = guildBD.channels.cache.find(chl => chl.name.toLowerCase() == project.toLowerCase() && chl.type == "GUILD_CATEGORY")
    var chl = cat.children.find(chl => chl.name.toLowerCase() == path.toLowerCase())
    var msgs = await chl.messages.fetch()

    var users = await GStats(allpath, path)
    var id
    if (users.length == 0){id = msgs.size}else{
        id = users[users.length-1].id
    }
    
    var returnData = {}
    for (let i = 0; i < structure.length; i++){
        returnData[structure[i]] = data[i]
    }
    var member = new memberBD(`${parseInt(id)+1}`, `<@!${user}>`, returnData)
    member = [member]
    chl.send(JSON.stringify(member, null, 4))
    }catch{
        guildBD.channels.cache.get('920291811614916609').send(`–û—à–∏–±–∫–∞.\n> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ **[–ø—É—Ç—å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id), –∑–Ω–∞—á–µ–Ω–∏—è]**`).then(msg => {
            setTimeout(() => {msg.delete()}, 10000)
        })
    }
}

async function EStats(allpath, id, par, data){
    try{
    var project = allpath.split('/')[0]
    var path = allpath.split('/')[1]

    var cat = guildBD.channels.cache.find(chl => chl.name.toLowerCase() == project.toLowerCase() && chl.type == "GUILD_CATEGORY")
    var chl = cat.children.find(chl => chl.name.toLowerCase() == path.toLowerCase())
    var BD = await GStats(allpath, path)
    var user = BD.find(user => user.id == id)
    var msg = await chl.messages.fetch(user.mid)

    var dat = eval(`${msg.content}`)
    dat[0].data[par] = data
    
    msg.edit(JSON.stringify(dat, null, 4))
    }catch{
        guildBD.channels.cache.get('920291811614916609').send(`–û—à–∏–±–∫–∞.\n> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ **[–ø—É—Ç—å, id-—è—á–µ–π–∫–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä, –∑–∞–º–µ–Ω—É]**`).then(msg => {
            setTimeout(() => {msg.delete()}, 10000)
        })
    }
}

async function DStats(allpath, id){
    try{
    var project = allpath.split('/')[0]
    var path = allpath.split('/')[1]
    
    var cat = guildBD.channels.cache.find(chl => chl.name.toLowerCase() == project.toLowerCase() && chl.type == "GUILD_CATEGORY")
    var chl = cat.children.find(chl => chl.name.toLowerCase() == path.toLowerCase())
    var BD = await GStats(allpath, path)
    var user = BD.find(user => user.id == id)
    var msg = await chl.messages.fetch(user.mid)
    setTimeout(() => msg.delete(), timeOfDelete)
    }catch{
        guildBD.channels.cache.get('920291811614916609').send(`–û—à–∏–±–∫–∞.\n> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ **[–ø—É—Ç—å, id-—è—á–µ–π–∫–∏]**`).then(msg => {
            setTimeout(() => {msg.delete()}, 10000)
        })
    }
}

async function minusMoney(member, money){
    stats = await GetStats();
    if (stats.length == 0){return};

    let user = stats.find(stat => stat.user == `<@!${member.id}>`);
    if(user == undefined){return}

    if(parseInt(user.money) < parseInt(money)){return false}
    EditStats(user.id,`money`,`${parseInt(user.money) - parseInt(money)}`);
    return true;
};

async function plusMoney(member, money){
    stats = await GetStats();
    if (stats.length == 0){return};

    let user = stats.find(stat => stat.user == `<@!${member.id}>`);
    if(user == undefined){return false}

    EditStats(user.id,`money`,`${parseInt(user.money) + parseInt(money)}`);
    return true;
};

async function pay(message, userDate, money, functionSend){
    stats = await GetStats();
    if (stats.length == 0){return};

    let moneyT = new Intl.NumberFormat("ru")

    let user = stats.find(stat => stat.user == `<@!${message.author.id}>`);
    let gUser = stats.find(stat => stat.user == `<@!${userDate}>`);
    if(gUser == undefined){
        functionSend(`> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–∏–±–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã —É–ø–æ–º—è–Ω–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ üôÖ`);
        sendLog(message,'–†–ü','–ü–æ–ø—Ä–æ–±–æ–≤–∞–ª –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏.','–û—à–∏–±–∫–∞',`–í—ã–≤–æ–¥: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–∏–±–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã —É–ø–æ–º—è–Ω–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ üôÖ`);
        return;
    };

    console.log(user);
    console.log(gUser)
    
    if (user.id == gUser.id){return};

    let user_user = message.member;
    let gUser_user = guild.members.cache.get(userDate);

    if(gUser == undefined){
        functionSend(`> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–∏–±–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã —É–ø–æ–º—è–Ω–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ üôÖ`);
        sendLog(message,'–†–ü','–ü–æ–ø—Ä–æ–±–æ–≤–∞–ª –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏.','–û—à–∏–±–∫–∞',`–í—ã–≤–æ–¥: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–∏–±–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã —É–ø–æ–º—è–Ω–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ üôÖ`);
        return;
    };
    if(isNaN(parseInt(money))){ functionSend(`> –î–µ–Ω—å–≥–∏ —Å—Ç–æ–∏—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Ü–∏—Ñ—Ä–∞—Ö, –∏–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞—Å—Ç—Å—è üî¢`); sendLog(message,'–û–±—â–µ–µ','–ü–æ–ø—Ä–æ–±–æ–≤–∞–ª –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏.','–û—à–∏–±–∫–∞',`–í—ã–≤–æ–¥: –î–µ–Ω—å–≥–∏ —Å—Ç–æ–∏—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Ü–∏—Ñ—Ä–∞—Ö, –∏–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞—Å—Ç—Å—è üî¢`); return};
    if(parseInt(user.money) < parseInt(money)){ functionSend(`> –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.`); sendLog(message,'–û–±—â–µ–µ','–ü–æ–ø—Ä–æ–±–æ–≤–∞–ª –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏.','–û—à–∏–±–∫–∞',`–í—ã–≤–æ–¥: –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.`); return};

    setTimeout(() => minusMoney(user_user, money), 500);
    setTimeout(() => plusMoney(gUser_user, money), 1000);
    
    functionSend(`> –í—ã –¥–∞–ª–∏ ${gUser_user.nickname}: ${moneyT.format(parseInt(money))}`);
    gUser_user.send(`> ${user_user.nickname} –¥–∞–ª –≤–∞–º: ${moneyT.format(parseInt(money))}`);

    sendLog(message,'–†–ü','–ü–µ—Ä–µ–¥–∞–ª –¥–µ–Ω—å–≥–∏.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: –í—ã –¥–∞–ª–∏ ${gUser_user.nickname}: ${moneyT.format(parseInt(money))}`)
    return;
};

//
// –û–¢–í–ï–¢–õ–ï–ù–ò–Ø
//

async function roflBot(text, messageG){
    var users = await GStats("pushpin/rofl")
    var dbMsg = users.find(db => db.data.quest.toLowerCase() == text.toLowerCase())
    console.log(dbMsg)

    if(dbMsg != undefined && !waitingOutputRoflBot){
        if(dbMsg.data.imgs == '') messageG.channel.send({content: `${dbMsg.data.reply} (–æ—Ç ${dbMsg.user})`, reply: {messageReference: messageG}})
        if(dbMsg.data.imgs != ''){
            let imgs = []
            for (url of dbMsg.data.imgs.split(';;')){
                imgs.push({attachment: url})
            }
            messageG.channel.send({
                content: `${dbMsg.data.reply} (–æ—Ç <@!${dbMsg.user}>)`, 
                files: imgs,
                reply: {messageReference: messageG}
            })
        }
    }
    if(dbMsg == undefined && !waitingOutputRoflBot){
        let filter = m => m.author.id == messageG.author.id
        waitingOutputRoflBot = true

        messageG.channel.send({content: `–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –º–Ω–µ —Å–∫–∞–∑–∞—Ç—å –Ω–∞ —ç—Ç–æ. \n> –ù–∞–ø–∏—à–∏, –∫–∞–∫ –º–Ω–µ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å`, reply: {messageReference: messageG}})
        .then(() => {
            messageG.channel.awaitMessages({filter,
                max: 1,
                time: 10000,
                errors: ['time'],
            })
            .then(message => {
                message = message.map(message => message)[0]
                let imgs = []
                for ([id, img] of message.attachments){
                    imgs.push(img.url)
                }
                if(imgs.length == 0)
                AStats("pushpin/rofl", message.author.id, [messageG.content, message.content, imgs.join(';;')])
                messageG.channel.send({content: `–°–ø–∞—Å–∏–±–æ, –±—É–¥—É –∑–Ω–∞—Ç—å!`, reply: {messageReference: message}}).then(() => waitingOutputRoflBot = false)
            })
            .catch(() => {
                messageG.channel.send({content: `–Ø —Ç–∞–∫ –∏ –Ω–µ –ø–æ–Ω—è–ª –∫–∞–∫ –º–Ω–µ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å ü§î`, reply: {messageReference: messageG}}).then(() => waitingOutputRoflBot = false)
            });
        });
    }
}

//
// –•–£–ö–ò
//

client.on('ready', () => {
    console.log(`${client.user.tag} ready!`)

    guild = client.guilds.cache.get(Config.guilds.main)
    guildAges = client.guilds.cache.get(Config.guilds.ages)
    guildBD = client.guilds.cache.get(Config.guilds.BD)

    function checkOnlineUsers(){
        members = guild.members.cache
        for (let [id, guild] of client.guilds.cache){
            members = guild.members.cache.concat(members)
        }

        let offlinemember = members.filter(m => m.presence === null && !m.user.bot).size
        let member = members.filter(m => !m.user.bot).size
        let onlinemember = member - offlinemember

        let endword
        if(onlinemember.toString().slice(-1) == '1'){endword = '–∞'}else{endword = '–æ–≤'}

        if (onlinemember > 0){
            client.user.setPresence({
              status: "online",
              activities: [{
                  name: `–Ω–∞ ${onlinemember} —É—á–∞—Å—Ç–Ω–∏–∫${endword} üë•`,
                  type: "WATCHING",
              }]
            })
        }else if (onlinemember == 0){
            client.user.setPresence({
                status: "idle",
                activities: [{
                    name: `–≤ –ø—É—Å—Ç–æ—Ç—É... üåô`,
                    type: "WATCHING",
                }]
            })
        }
    }

    checkOnlineUsers()
    client.on('presenceUpdate', () => {
        checkOnlineUsers()
    });

    // –û–ü–û–í–ï–©–ï–ù–ò–ï –û –°–ë–û–†–ê–•
    /* setInterval(async () => {
        var date = new Date()
        if(date.getUTCDay() == 5 ||
        date.getUTCDay() == 6 ||
        date.getUTCDay() == 0){
            let channel = guild.channels.cache.get(Config.channelsID.announcements)
            let lastMessage = await channel.messages.fetch()

            lastMessageBot = lastMessage.filter(msg => msg.author.bot)
            if(lastMessageBot.size == 0){
                lastMessage = lastMessage.first()
            }else{
                lastMessage = lastMessageBot.first()
            }

            let dateOfMessage = new Date(lastMessage.createdTimestamp)

            if(date.getUTCHours()+3 == 17 && (dateOfMessage.getUTCFullYear() != date.getUTCFullYear() || dateOfMessage.getUTCMonth() != date.getUTCMonth() || dateOfMessage.getUTCDate() != date.getUTCDate())){
                channel.send(`> <@&836269090996879387>, —Å–±–æ—Ä, –¥–∞–º—ã –∏ –≥–æ—Å–ø–æ–¥–∞!\n–í—Å–µ–º –ø—Ä–∏—è—Ç–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–≥—Ä—ã! üìå`)
            }
        }
    }, 60000) */
});

client.on('guildMemberAdd', (member) => {
    if(member.guild.id == Config.guilds.main){
        giveRole(member, '829423238169755658')
    }
    sendLog(member, undefined, 'other', '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 0, `${member.user.tag} –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!`)
});

client.on('messageDelete', (message) => {
    if(!messageNew.author.bot){if(rpGuilds.find(guild => guild == message.guild.id) != null){
        sendLog(message.member,message.channel,'rp','–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',0,`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.content}`)
    }else{sendLog(message.member,message.channel,'other','–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',0,`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.content}`)}}
});

client.on('messageUpdate', (messageOld, messageNew) =>{
    if(!messageNew.author.bot){if(rpGuilds.find(guild => guild == messageNew.guild.id) != null){
        sendLog(messageNew.member,messageNew.channel,'rp','–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ',0,`–°—Ç–∞—Ä–æ–µ —Å–æ–æ–æ–±—â–µ–Ω–∏–µ:\n> ${messageOld.content}\n–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n> ${messageNew.content}`)
    }else{sendLog(messageNew.member,messageNew.channel,'other','–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ',0,`–°—Ç–∞—Ä–æ–µ —Å–æ–æ–æ–±—â–µ–Ω–∏–µ:\n> ${messageOld.content}\n–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n> ${messageNew.content}`)}}
})

client.on('messageCreate', message => {
    // –ü–ï–†–ï–ú–ï–ù–ù–´–ï

    var cA = haveRole(message.member, "[A]"),
        cB = haveRole(message.member, "[B]"),
        cC = haveRole(message.member, "[C]")
    let mb = message.author.bot;
    let mg = message.channel.type == "DM";
    let comand = cmdParametrs(message.content)

    // –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´

    if(message.content == '‚†Ä' && message.author.bot){
        setTimeout(() => message.delete(), timeOfDelete)
    }
    if(comand.com == `send` && !mb && !mg && cA){		
        message.channel.send(`${comand.arg}`)
        setTimeout(() => message.delete(), timeOfDelete)
    }
    if(comand.com == `clear` && !mb && !mg && (cA || cB)){
        let arg = parseInt(comand.sarg[0])
        
        if (arg > 0 && arg < 100){
            message.channel.bulkDelete(arg, true)
            //sendLog(message,`–ê–¥–º–∏–Ω`,`–£–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è.`,`–£—Å–ø–µ—à–Ω–æ`,`–£–¥–∞–ª–µ–Ω–æ ${arg} —Å–æ–æ–±—â–µ–Ω–∏–π.`)
        }else if (arg >= 100){
            //sendLog(message,`–ê–¥–º–∏–Ω`,`–ü–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.`,`–û—à–∏–±–∫–∞`,`–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –±–æ–ª–µ–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π.`)
        }else{
            //sendLog(message,`–ê–¥–º–∏–Ω`,`–ü–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.`,`–û—à–∏–±–∫–∞`,`–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç.`)
        }
    }
    if(comand.com == `edit` && !mg && cA){
        message.channel.guild.channels.cache.find(id => id == `${comand.sarg[0]}`).messages.fetch(`${comand.sarg[1]}`)
        .then(msg =>{
            if(!msg.author.bot) return
            msg.edit(cmdParametrs(message,2).carg)
        })
        setTimeout(() => message.delete(), timeOfDelete)
    }
    if(comand.com == `checkm` && !mb && !mg && cA){
        console.log(comand)
        console.log(message)
        setTimeout(() => message.delete(), timeOfDelete)
    }
    if(comand.com == `cex` && !mb && !mg && cA){
        createEx(comand.oarg[0],comand.oarg[1],comand.oarg[2],comand.oarg[3],message)
        setTimeout(() => message.delete(), timeOfDelete)
    }
    if(comand.com == `clore` && !mb && !mg && cA){
        createLore(comand.oarg[0],comand.oarg[1],comand.oarg[2],message)
        setTimeout(() => message.delete(), timeOfDelete)
    }

    // –ì–õ–ê–í–ù–´–ô –°–ï–†–í–ï–†

    if (message.guild.id == Config.guilds.main){
        if(!mb && !mg) sendLog(message.member, message.channel, 'other', '–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ', '0', message.content)

        if(message.channel.id == Config.channelsID.dev_process && message.author.id != '822500483826450454' && !mg && mb){
            createCom(message.embeds[0],message)
        }
        if(message.channel.id == Config.channelsID.bot && !mb && !mg){
            roflBot(message.content, message)
        }

        if(comand.com == `refreshFA` && (haveRole(message.member, `833778527609552918`) || head || rpCreator) && !mb && !mg){
            setTimeout(() => message.delete(), timeOfDelete);
            let channel
            let specialChannel = [
                {id: guild.roles.everyone, deny: 'VIEW_CHANNEL'},
                {id: `833226140755689483`, allow: 'VIEW_CHANNEL'},
                {id: `833227050550296576`, allow: 'VIEW_CHANNEL'},
                {id: `830061387849662515`, allow: 'VIEW_CHANNEL'},
                {id: `856092976702816287`, allow: 'VIEW_CHANNEL'},
            ]
            try{
                for(let channelID of guild.channels.cache){
                    channel = guild.channels.cache.get(channelID[0])
                    if(channel != undefined){
                        if(channel.parentID == Config.channelsID.fast_access){channel.delete()}
                    }
                }
                setTimeout(() =>{
                    if(channel != undefined){
                        for(let obj of Config.objects){
                            if(obj.open){
                                guild.channels.create(`¬´${obj.name}¬ª`, {type: 'text', topic: `${obj.id}-${Config.globalObjects.find(gobj => gobj.id == obj.id).name}`, parent: Config.channelsID.fast_access})
                            }else if(!obj.open){
                                guild.channels.create(`¬´${obj.name}¬ª`, {type: 'text', topic: `${obj.id}-${Config.globalObjects.find(gobj => gobj.id == obj.id).name}`, parent: Config.channelsID.fast_access, permissionOverwrites: specialChannel})
                            }
                        } 
                    }
                }, timeOfDelete*5)
            }catch(error){console.log(error)}
        }

        if(comand.com == `refreshIDobj` && (haveRole(message.member, `833778527609552918`) || head || rpCreator) && !mb && !mg){
            setTimeout(() => message.delete(), timeOfDelete);
            let channelsRefr = []
            for(let channel of guild.channels.cache) if(channel[1].parentID != undefined) channelsRefr.push(channel[1])
            try{
                for(let obj of Config.objects){
                    for(let room of obj.rooms){
                        let channel = channelsRefr.find(channel => channel.name.toLowerCase() == room.toLowerCase() && channel.parent.id == obj.cId)
                        channel.setTopic(`${obj.id}-${Config.globalObjects.find(gobj => gobj.id == obj.id).name}`)
                    }
                }
            }catch(error){console.log(error)}
        }

        if(comand.com == `commands` && head && !mb && !mg){
            setTimeout(() => message.delete(), timeOfDelete);
            client.interaction.getApplicationCommands(config.guild_id).then(console.log);
        }
    }else if(message.guild.id == Config.guilds.ages){
        if(!mb && !mg) sendLog(message.member, message.channel, 'rp', '–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ', '0', message.content)
    }else if(message.guild.id == Config.guilds.BD){
        if(!mb && !mg && comand.com == "Add" && cA){
            AStats(comand.oarg[0], comand.oarg[1], comand.barg)
            setTimeout(() => {message.delete()}, 15000)
        }
        if(!mb && !mg && comand.com == "Get" && cA){
            GStats(comand.oarg[0]).then(console.log)
            setTimeout(() => {message.delete()}, 15000)
        }
        if(!mb && !mg && comand.com == "Edit" && cA){
            EStats(comand.oarg[0], comand.oarg[1], comand.oarg[2], comand.barg)
            setTimeout(() => {message.delete()}, 15000)
        }
        if(!mb && !mg && comand.com == "Del" && cA){
            DStats(comand.oarg[0], comand.oarg[1])
            setTimeout(() => {message.delete()}, 15000)
        }
    }else{

    }
});

const config = {
    token: Config.discordTocens.main,
    publicKey : "0e6a87c0f53052a2025917df52069144195fea4b82e32cb43619d65d1c278a97",
    applicationId: "822500483826450454",
    guild_id: "814795850885627964"
};

/* client.interaction = new DiscordInteractions({
    applicationId: config.applicationId,
    authToken: config.token,
    publicKey: config.publicKey,
});

client.on('ready', () => {
	checkIntegrations();
}); */

client.ws.on('INTERACTION_CREATE', async interaction => {

    /* 
    –ë–õ–û–ö –§–£–ù–ö–¶–ò–ô –ö–û–ú–ê–ù–î
    */

    console.log(interaction)
    
    let channel = guild.channels.cache.get(interaction.channel_id);
    let user
    try{
        user = await guild.members.fetch(interaction.member.user.id);
    }catch{
        user = await guild.members.fetch(interaction.user.id);
    }
    let head = (haveRole(user, '833226140755689483') || haveRole(user, '833227050550296576'));
    let rpCreator = haveRole(user, '856092976702816287')
    let rpchannel = rpChannels.find(channel => channel == interaction.channel_id) != null;
    let msgDate = {author: user.user, channel: channel, content: arg, member: user, channel_id: interaction.channel_id};

    function sendNullMessage(){
        client.api.interactions(interaction.id, interaction.token).callback.post({
            data: {
                type: 4,
                data: {
                    content: '‚†Ä'
                }
            }
        })
    }

    function sendGlobalMessage(content){
        client.api.interactions(interaction.id, interaction.token).callback.post({
            data: {
                type: 4,
                data: {
                    content: content
                }
            }
        })
    }

    function sendLocalMessage(content){
        client.api.interactions(interaction.id, interaction.token).callback.post({
            data: {
                type: 4,
                data: {
                    content: content,
                    flags: 64
                }
            }
        })
    }

    async function sendEditMessage(text, color, dop, ping){
        client.api.interactions(interaction.id, interaction.token).callback.post({
            data: {
                type: 5,
            },
        })

        let webhooks = await channel.fetchWebhooks()
        let timer
        console.log(webhooks.find(hook => hook.name == user.nickname))
        if(webhooks.find(hook => hook.name == user.nickname) == undefined){
            channel.createWebhook(`${user.nickname}`, {avatar: user.user.displayAvatarURL()}).then(hook => {
                console.log(hook)

                if(dop != undefined){
                    hook.send(dop)
                }

                setTimeout(() => {hook.sendSlackMessage({
                    'username': user.nickname,
                    'attachments': [{
                        'pretext': text,
                        'color': color,
                    }]
                })}, 100)

                if(ping != undefined){
                    setTimeout(() => hook.send(`${ping}‚§¥Ô∏è`), 150)
                }

                timer = setTimeout(() => {
                    hook.delete()
                }, 60000)
            })
        }else{
            let hook = webhooks.find(hook => hook.name == user.nickname)
            let hookId = hook.id
            console.log(hook)

            if(dop != undefined){
                hook.send(dop)
            }

            setTimeout(() => {hook.sendSlackMessage({
                'username': user.nickname,
                'attachments': [{
                    'pretext': text,
                    'color': color,
                }]
            })}, 100)

            if(ping != undefined){
                setTimeout(() => hook.send(`${ping}‚§¥Ô∏è`), 150)
            }

            clearTimeout(timer); 
            timer = setTimeout(() => {
                channel.fetchWebhooks().then(hooks => hooks.get(hookId).delete())
            }, 60000);
        }
        
        client.api.webhooks(client.user.id, interaction.token).messages('@original').delete()
    };

    if(interaction.type == 3){
        if(Object.getOwnPropertyNames(Config.departments).find(obj => obj == interaction.data.custom_id) != undefined){
            if(channel.id == Config.departments[interaction.data.custom_id][0] && haveRole(msgDate.member, `854315001543786507`) && !haveRole(msgDate.member, Config.departments[interaction.data.custom_id][2])){
                let channel = guild.channels.cache.get(BDchnl);
                let oMsg = await channel.messages.fetch(Config.departments[interaction.data.custom_id][1])
                let nMsg = oMsg.content.split('\n');
                nMsg.splice(0,1);

                if(nMsg.find(member => member.split('-')[0] == msgDate.member.id) != null){
                    console.log(nMsg.find(member => member.split('-')[0] == msgDate.member.id))
                    giveRole(user, Config.departments[interaction.data.custom_id][2]);
                    removeRole(user, '854315001543786507');
                    sendLog(msgDate,'–†–ü','–í–∑—è–ª —Ñ–æ—Ä–º—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.','–£—Å–ø–µ—à–Ω–æ',`–†–æ–ª—å: ${guild.roles.cache.get(Config.departments[interaction.data.custom_id][2]).name}`)
                    sendLocalMessage(`> **–í—ã –≤–∑—è–ª–∏ —Ñ–æ—Ä–º—É** üóÇÔ∏è`);
                    return;
                }else{
                    sendLocalMessage(`> **–í—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏** üóÇÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É.`);
                    sendLog(msgDate,'–†–ü','–ü–æ–ø—ã—Ç–∞–ª—Å—è –≤–∑—è—Ç—å —Ñ–æ—Ä–º—É.','–û—à–∏–±–∫–∞',`–í—ã–≤–æ–¥: > **–í—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏** üóÇÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É.`)
                    return
                }
            }else if(channel.id == Config.departments[interaction.data.custom_id][0] && !haveRole(msgDate.member, `854315001543786507`)||
                channel.id != Config.departments[interaction.data.custom_id][0] && !haveRole(msgDate.member, `854315001543786507`)){
                sendLocalMessage(`> **–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π** üóÇÔ∏è`);
                sendLog(msgDate,'–†–ü','–ü–æ–ø—ã—Ç–∞–ª—Å—è –≤–∑—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–ª–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.','–û—à–∏–±–∫–∞',`–í—ã–≤–æ–¥: > **–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π** üóÇÔ∏è`)
                return;
            }
        }

        if(interaction.data.custom_id == 'yesNSFW'){
            if(haveRole(user, `871027221521899621`)){
                client.api.interactions(interaction.id, interaction.token).callback.post({
                    data: {
                        type: 7,
                        data:{
                            content: '–û—Ç–ª–∏—á–Ω–æ! –í–∞–º –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ NSFW –∫–∞–Ω–∞–ª–∞–º.',
                            components: [],
                            embeds: []
                        }
                    }
                })
                removeRole(user, '871027221521899621')
            }else if(!haveRole(user, `871027221521899621`)){
                client.api.interactions(interaction.id, interaction.token).callback.post({
                    data: {
                        type: 7,
                        data:{
                            content: '–û—Ç–ª–∏—á–Ω–æ! –í–∞–º –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ NSFW –∫–∞–Ω–∞–ª–∞–º.',
                            components: [],
                            embeds: []
                        }
                    }
                })
                giveRole(user, '871027221521899621')
            }
        }
        if(interaction.data.custom_id == 'noNSFW'){
            client.api.interactions(interaction.id, interaction.token).callback.post({
                data: {
                    type: 7,
                    data:{
                        content: '–•–æ—Ä–æ—à–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!',
                        components: [],
                        embeds: []
                    }
                }
            })
        }
    }

    if (interaction.data.name == "–æ—Å–º–æ—Ç—Ä") {
        var arg = "";
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined){
            
        } else {
            interaction.data.options.forEach((c) => {
                if (c.name == "–æ—Å–º–æ—Ç—Ä") {
                    arg = c.value;
                }
            });
        }

        if(rpchannel){
            let homePos = Config.objects.find(st => `¬´${st.name.toLowerCase()}¬ª` == channel.parent.name.toLowerCase().slice(3) && st.id == channel.topic.split('-')[0]);
            console.log(homePos.radius.length)

            let objects = [];
            for (let room of homePos.rooms) objects.push(room.slice(0,1).toUpperCase()+room.slice(1));

            if (homePos != null && objects.length != 0 && homePos.radius.length != 0){
                sendLocalMessage(`–°–æ—Å–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã —Å ${homePos.name}:\n> ${homePos.radius.join(';\n> ')}.\n–ë–ª–∏–∂–∞–π—à–∏–µ –∫–æ–º–Ω–∞—Ç—ã:\n> ${objects.join(';\n> ')}.`)
                sendLog(msgDate,`–†–ü`,`–û—Å–º–æ—Ç—Ä–µ–ª—Å—è –Ω–∞ —É–ª–∏—Ü–µ.`,`–£—Å–ø–µ—à–Ω–æ`,`–í—ã–≤–æ–¥: –°–æ—Å–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã —Å ${homePos.name}:\n> ${homePos.radius.join(';\n> ')}.\n–ë–ª–∏–∂–∞–π—à–∏–µ –∫–æ–º–Ω–∞—Ç—ã:\n> ${objects.join(';\n> ')}.`);
            }else if(homePos != null && objects.length == 0 && homePos.radius.length != 0){
                sendLocalMessage(`–°–æ—Å–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã —Å ${homePos.name}:\n> ${homePos.radius.join(';\n> ')}.\n–ë–ª–∏–∂–∞–π—à–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.`)
                sendLog(msgDate,`–†–ü`,`–û—Å–º–æ—Ç—Ä–µ–ª—Å—è –Ω–∞ —É–ª–∏—Ü–µ.`,`–£—Å–ø–µ—à–Ω–æ`,`–í—ã–≤–æ–¥: –°–æ—Å–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã —Å ${homePos.name}:\n> ${homePos.radius.join(';\n> ')}.\n–ë–ª–∏–∂–∞–π—à–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.`);
            }else if(homePos != null && objects.length != 0 && homePos.radius.length == 0){
                sendLocalMessage(`–°–æ—Å–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã —Å ${homePos.name}:\n> –ë–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n–ë–ª–∏–∂–∞–π—à–∏–µ –∫–æ–º–Ω–∞—Ç—ã:\n> ${objects.join(';\n> ')}.`)
                sendLog(msgDate,`–†–ü`,`–û—Å–º–æ—Ç—Ä–µ–ª—Å—è –Ω–∞ —É–ª–∏—Ü–µ.`,`–£—Å–ø–µ—à–Ω–æ`,`–í—ã–≤–æ–¥: –°–æ—Å–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã —Å ${homePos.name}:\n> –ë–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n–ë–ª–∏–∂–∞–π—à–∏–µ –∫–æ–º–Ω–∞—Ç—ã:\n> ${objects.join(';\n> ')}.`);
            }else{
                sendLocalMessage(`–°–æ—Å–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã —Å ${homePos.name}:\n> –ë–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n–ë–ª–∏–∂–∞–π—à–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.`)
                sendLog(msgDate,`–†–ü`,`–û—Å–º–æ—Ç—Ä–µ–ª—Å—è –Ω–∞ —É–ª–∏—Ü–µ.`,`–£—Å–ø–µ—à–Ω–æ`,`–í—ã–≤–æ–¥: –°–æ—Å–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã —Å ${homePos.name}:\n> ${homePos.radius.join(';\n> ')}.\n–ë–ª–∏–∂–∞–π—à–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.`);
            }
        }else{
            sendNullMessage()
        }
    }
    if (interaction.data.name == "–∏–¥—Ç–∏") {
        var arg = "";
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        } else {
            arg = interaction.data.options[0].value.split(' ')[0]
        }
        

        if(rpchannel){
            let argsObj = guild.channels.cache.get(arg.slice(2).slice(0,-1))
            let channelFA = argsObj
            //–ø—Ä–∏–Ω–∏–º–∞—é –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            let homePos = Config.objects.find(st => `¬´${st.name.toLowerCase()}¬ª` == channel.parent.name.toLowerCase().slice(3) && st.id == channel.topic.split('-')[0]);
            console.log(homePos)
            //–∏—â–∏–º —Å—Ä–µ–¥–∏ —É–ª–∏—Ü —Ç–∞–∫—É—é —É–ª–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–æ–≤–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª.
            if(argsObj != undefined) argsObj = argsObj.name.slice(1).slice(0,-1).toLowerCase().split('-').join(' ');
            if(argsObj == undefined){sendLog(msgDate,`–†–ü`,`–ü–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–π—Ç–∏.`,`–û—à–∏–±–∫–∞`,`–í—ã–≤–æ–¥: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ # –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \`‚ùå Fast Access.\``); sendLocalMessage("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ # –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \`‚ùå Fast Access.\`"); return};
            if(homePos.name == argsObj){sendLocalMessage(`–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–æ–º –æ–±—ä–µ–∫—Ç–µ.`); return}
            //–ø—Ä–æ–≤–µ—Ä—è—é –Ω–µ –∫–∞–Ω–∞–ª –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä—É –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ.
            let walkway = homePos.radius.find(obj => obj.toLowerCase() == argsObj.toLowerCase());
            //–∏—â—É —Å—Ä–µ–¥–∏ —Ä–∞–¥–∏—É—Å–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Ç–æ—Ç –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–∫–∞–∑–∞–Ω –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ.

            if (walkway != null){
                let cats = guild.channels.cache.filter(cat => cat.type == 'category' && cat.name.toLowerCase().slice(3) == `¬´${walkway}¬ª`.toLowerCase());
                //–∏—â–µ–º –∫–∞–Ω–∞–ª—ã —á—å–µ –∏–º—è –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ –∏–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç–∞ –ø—É—Ç–∏
                
                if(cats.length != 0) for(let [id, cat] of cats){
                    let catId = Config.objects.find(obj => obj.cId == cat.id).id
                    if (catId == channelFA.topic.split('-')[0] && (Config.globalObjects.find(obj => obj.name.toLowerCase() == walkway.toLowerCase() && obj.id == catId) || Config.globalObjects.find(obj => obj.children.find(child => child.toLowerCase() == walkway.toLowerCase() && obj.id == catId) != undefined))){
                    //–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –Ω–∞ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        if (haveRole(user,'835630198199681026')){ sendLocalMessage(`> –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–º–æ–¥–µ.`); return};
                        sendNullMessage()
                        setTimeout(() => {cat.updateOverwrite(user, { 'VIEW_CHANNEL': true })}, timeOfDelete);
                        //–¥–∞–µ–º –ø—Ä–∞–≤–æ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
                        setTimeout(() => channel.parent.permissionOverwrites.get(user.id).delete(), timeOfDelete*3);
                        //—É–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–æ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        sendLog(msgDate,`–†–ü`,`–ü–æ—à–µ–ª.`,`–£—Å–ø–µ—à–Ω–æ`,`–ü–µ—Ä–µ—à–µ–ª —Å ${homePos.name} –Ω–∞ ${walkway}.`);
                    }else if (catId == channelFA.topic.split('-')[0] && catId == homePos.id){
                    //–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –Ω–∞ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        if (haveRole(user,'835630198199681026')){ sendLocalMessage(`> –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–º–æ–¥–µ.`); return};
                        sendNullMessage()
                        setTimeout(() => {cat.updateOverwrite(user, { 'VIEW_CHANNEL': true })}, timeOfDelete);
                        //–¥–∞–µ–º –ø—Ä–∞–≤–æ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
                        setTimeout(() => channel.parent.permissionOverwrites.get(user.id).delete(), timeOfDelete*3);
                        //—É–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–æ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        sendLog(msgDate,`–†–ü`,`–ü–æ—à–µ–ª.`,`–£—Å–ø–µ—à–Ω–æ`,`–ü–µ—Ä–µ—à–µ–ª —Å ${homePos.name} –Ω–∞ ${walkway}.`);
                    }else if (catId == channelFA.topic.split('-')[0]){
                        sendLocalMessage(`${argsObj} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å–µ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º —Å ${homePos.name}.`)
                        sendLog(msgDate,`–†–ü`,`–ü–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–π—Ç–∏.`,`–û—à–∏–±–∫–∞`,`–í—ã–≤–æ–¥: ${argsObj} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å–µ–¥–Ω–µ–π —É–ª–∏—Ü–µ–π —Å ${homePos.name}.`);
                    }
                }else{sendNullMessage()}
            }else if (walkway == null && Config.objects.find(st => st.name.toLowerCase() == argsObj.toLowerCase()) != null){
                sendLocalMessage(`${argsObj} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å–µ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º —Å ${homePos.name}.`)
                sendLog(msgDate,`–†–ü`,`–ü–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–π—Ç–∏.`,`–û—à–∏–±–∫–∞`,`–í—ã–≤–æ–¥: ${argsObj} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å–µ–¥–Ω–µ–π —É–ª–∏—Ü–µ–π —Å ${homePos.name}.`);
            }else{
                sendLocalMessage(`–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ ${arg} –Ω–µ—Ç, –ª–∏–±–æ –≤—ã –≤–≤–µ–ª–∏ –µ–≥–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.`)
                sendLog(msgDate,`–†–ü`,`–ü–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–π—Ç–∏.`,`–û—à–∏–±–∫–∞`,`–í—ã–≤–æ–¥: –í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ —É–ª–∏—Ü—ã ${arg} –Ω–µ—Ç, –ª–∏–±–æ –≤—ã –≤–≤–µ–ª–∏ –µ–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.`);
            };
        }else{
            sendNullMessage()
        }
    }
    if (interaction.data.name == "–±–∞–ª–∞–Ω—Å") {
        var arg = "–±–∞–ª–∞–Ω—Å";
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            interaction.data.options.forEach((c) => {
                if (c.name == "–æ—Å–º–æ—Ç—Ä") {
                    arg = c.value;
                }
            });
        }
    
        if(rpchannel){
            let moneyT = new Intl.NumberFormat("ru", {
                style: "currency",
                currency: "USD",
                minimumSignificantDigits: 1
            })
            GetStats().then(stats => {
                if (stats.length == 0){return};
                sendLocalMessage(`–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${moneyT.format(parseInt(stats.find(stat => stat.user == `<@!${user.id}>`).money))} üí∞`)
                sendLog(msgDate,'–†–ü','–£–∑–Ω–∞–ª —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${moneyT.format(parseInt(stats.find(stat => stat.user == `<@!${user.id}>`).money))} üí∞`);
            });
        }else{
            sendNullMessage()
        }
    }
    if (interaction.data.name == "–∑–∞–ø–ª–∞—Ç–∏—Ç—å") {
        var userDate = '';
        var money = '';
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            interaction.data.options.forEach((c) => {
                if (c.name == "–∏–≥—Ä–æ–∫") {
                    userDate = c.value;
                    console.log(userDate)
                }
                if (c.name == "—Å—É–º–º–∞") {
                    money = c.value;
                }
            });
        }
    
        if(rpchannel){
            pay(msgDate, userDate, money, sendLocalMessage);
        }else{
            sendNullMessage()
        }
    }
    if (interaction.data.name == "—Ä–µ–∫–ª–∞–º–∞") {
        var arg = "";
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            interaction.data.options.forEach((c) => {
                if (c.name == "—Ç–µ–∫—Å—Ç") {
                    arg = c.value;
                }
            });
        }
    
        if(rpchannel){
            let moneyT = new Intl.NumberFormat("ru", {
                style: "currency",
                currency: "USD",
                minimumSignificantDigits: 1
            });
            
            minusMoney(msgDate.member, 100).then(succ =>{
                if(succ == true){
                    guild.channels.cache.get(Config.channelsID.adverts).send(`> –†–µ–∫–ª–∞–º–∞ –æ—Ç ${msgDate.member.nickname} üì¢\n${arg}`)
                    sendLocalMessage(`> –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ä–µ–∫–ª–∞–º—É –∑–∞ ${moneyT.format(100)} üì¢`);
                    sendLog(msgDate,'–†–ü','–ü—Ä–∏–æ–±—Ä–µ–ª —Ä–µ–∫–ª–∞–º—É.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: > –†–µ–∫–ª–∞–º–∞ –æ—Ç ${msgDate.member.nickname} üì¢\n${arg}\n> –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ä–µ–∫–ª–∞–º—É –∑–∞ ${moneyT.format(100)} üì¢`)
                }else if(succ == false){
                    sendLocalMessage(`> –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Ä–µ–∫–ª–∞–º—É üì¢`);
                    sendLog(msgDate,'–†–ü','–ü–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º—É.','–û—à–∏–±–∫–∞',`–í—ã–≤–æ–¥: > –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Ä–µ–∫–ª–∞–º—É üì¢`)
                }
            });
        }else{
            sendNullMessage()
        }
    }
    if (interaction.data.name == "–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ") {
        var arg = "";
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            interaction.data.options.forEach((c) => {
                if (c.name == "—Ç–µ–∫—Å—Ç") {
                    arg = c.value;
                }
            });
        }
    
        if(rpchannel && haveRole(msgDate.member, `852668893821665320`)){
            sendLocalMessage(`> –í—ã –æ–ø–æ–≤–µ—Å—Ç–∏–ª–∏ –æ—Ç –º—ç—Ä–∏–∏ –≥–æ—Ä–æ–¥–∞ üéôÔ∏è\n${arg}`)
            guild.channels.cache.get(Config.channelsID.adverts).send(`> –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç –º—ç—Ä–∏–∏ –≥–æ—Ä–æ–¥–∞ üéôÔ∏è\n${arg}`)
            sendLog(msgDate,'–†–ü','–û–ø–æ–≤–µ—Å—Ç–∏–ª –≥–æ—Ä–æ–¥.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: > –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç –º—ç—Ä–∏–∏ –≥–æ—Ä–æ–¥–∞ üéôÔ∏è\n${arg}`)
        }else{
            sendNullMessage()
        }
    }
    if (interaction.data.name == "—Ñ–æ—Ä–º–∞") {
        var arg = "";
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            interaction.data.options.forEach((c) => {
                if (c.name == "") {
                    arg = c.value;
                }
            });
        }
    
        if(rpchannel){
            let comps = []
            function giveForm(comps){
                if(comps.length == 0){
                    sendLocalMessage(`> **–í—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏** üóÇÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É.`);
                    sendLog(msgDate,'–†–ü','–ü–æ–ø—ã—Ç–∞–ª—Å—è –≤–∑—è—Ç—å —Ñ–æ—Ä–º—É.','–û—à–∏–±–∫–∞',`–í—ã–≤–æ–¥: > **–í—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏** üóÇÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É.`)
                    return
                }
                for(let dep in Config.departments){
                    if(channel.id == Config.departments[dep][0] && !haveRole(msgDate.member, `854315001543786507`) && haveRole(msgDate.member, Config.departments[dep][2])){
                        removeRole(msgDate.member, Config.departments[dep][2]);
                        giveRole(msgDate.member, '854315001543786507');
                        sendLocalMessage(`> **–§–æ—Ä–º–∞ —Å–Ω—è—Ç–∞** üóÇÔ∏è`);
                        sendLog(msgDate,'–†–ü','–°–Ω—è–ª —Ñ–æ—Ä–º—É.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: > **–§–æ—Ä–º–∞ —Å–Ω—è—Ç–∞** üóÇÔ∏è`)
                        return;
                    }
                }
                
                client.api.interactions(interaction.id, interaction.token).callback.post({
                    data:{
                        type: 4,
                        data: {
                            embeds: [
                                {
                                    fields: [{
                                        name: `–í–∑—è—Ç–∏–µ —Ñ–æ—Ä–º—ã`,
                                        value: `–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é.`
                                    }],
                                }
                            ],
                            components: [
                                {
                                    type: 1,
                                    components: comps
                                }
                            ],
                            flags: 64
                        }
                    }
                })
            };

            async function forDep(){
                for(let dept in Config.departments){
                    if(channel.id == Config.departments[dept][0]){
                        let channel = guild.channels.cache.get(BDchnl);
                        let oMsg = await channel.messages.fetch(Config.departments[dept][1])
                        let nMsg = oMsg.content.split('\n');
                        nMsg.splice(0,1);
        
                        if(nMsg.find(member => member.split('-')[0] == msgDate.member.id) != null){
                            comps.push({
                                type: 2,
                                label: Config.departments[dept][3],
                                style: Config.departments[dept][4],
                                custom_id: dept
                            })
                        }
                    };
                }
            }
            forDep().then(() => {
                console.log(comps)
                giveForm(comps);
            })
            
        }else{
            sendNullMessage()
        }
    }
    if (interaction.data.name == "911") {
        var code = "";
        var text = "";
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            console.log(interaction.data.options[1].value)
            code = interaction.data.options[0].value
            text = interaction.data.options[1].value
        }
    
        if(rpchannel){
            let object = channel.parent.name.slice(4).slice(0,-1);
            let room = channel.name;
            let adres = `${Config.globalObjects.find(obj => obj.id == channel.topic.split('-')[0]).name}, ${object.slice(0,1).toUpperCase()+object.slice(1)}, ${room.slice(0,1).toUpperCase()+room.slice(1)}`
            if(code == '1'){
                let staff = guild.members.cache.filter(member => haveRole(member, Config.departments.fire[2]));
                if(staff.size == 0){
                    sendLocalMessage(`**–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–∂–∞—Ä–Ω—ã–µ –Ω–∞ —Å–ª—É–∂–±–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç** üî•`);
                    sendLog(msgDate,'–†–ü','–ü–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å –ø–æ–∂–∞—Ä–Ω—É—é —Å–ª—É–∂–±—É.','–û—à–∏–±–∫–∞',`–í—ã–≤–æ–¥: **–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–∂–∞—Ä–Ω—ã–µ –Ω–∞ —Å–ª—É–∂–±–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç** üî•`)
                }else{
                    sendLocalMessage(`**–í—ã –≤—ã–∑—ã–≤–∞–ª–∏ –ø–æ–∂–∞—Ä–Ω—É—é —Å–ª—É–∂–±—É** üî•\n> ${text}`);
                    sendLog(msgDate,'–†–ü','–í—ã–∑–≤–∞–ª –ø–æ–∂–∞—Ä–Ω—É—é —Å–ª—É–∂–±—É.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: **–í—ã –≤—ã–∑—ã–≤–∞–ª–∏ –ø–æ–∂–∞—Ä–Ω—É—é —Å–ª—É–∂–±—É** üî•\n> ${text}`)
                    guild.channels.cache.get(`860559004278325268`).send(`<@&${Config.departments.fire[2]}>, ${msgDate.member.nickname} –≤—ã–∑–≤–∞–ª –ø–æ–∂–∞—Ä–Ω—É—é —Å–ª—É–∂–±—É:`, {embed: {
                            thumbnail: {
                                url: `https://cdn.discordapp.com/emojis/822763827975815198.png?v=1`
                            },
                            fields: [{
                                name: `–¢–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞:`,
                                value: text
                            },
                            {
                                name: `–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:`,
                                value: adres
                            }],
                        }
                    });
                }
            }else if(code == '2'){
                let staff = guild.members.cache.filter(member => haveRole(member, Config.departments.police[2]));
                if(staff.size == 0){
                    sendLocalMessage(`**–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–µ –Ω–∞ —Å–ª—É–∂–±–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç** üöî`);
                    sendLog(msgDate,'–†–ü','–ü–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å –ø–æ–ª–∏—Ü–∏—é.','–û—à–∏–±–∫–∞',`–í—ã–≤–æ–¥: **–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–µ –Ω–∞ —Å–ª—É–∂–±–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç** üöî`)
                }else{
                    sendLocalMessage(`**–í—ã –≤—ã–∑—ã–≤–∞–ª–∏ –ø–æ–ª–∏—Ü–∏—é** üöî\n> ${text}`);
                    sendLog(msgDate,'–†–ü','–í—ã–∑–≤–∞–ª –ø–æ–ª–∏—Ü–∏—é.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: **–í—ã –≤—ã–∑—ã–≤–∞–ª–∏ –ø–æ–ª–∏—Ü–∏—é** üöî\n> ${text}`)
                    guild.channels.cache.get(`860558870962110475`).send(`<@&${Config.departments.police[2]}>, ${msgDate.member.nickname} –≤—ã–∑–≤–∞–ª –ø–æ–ª–∏—Ü–∏—é:`, {embed: {
                            thumbnail: {
                                url: `https://cdn.discordapp.com/emojis/822763866584121344.png?v=1`
                            },
                            fields: [{
                                name: `–¢–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞:`,
                                value: text
                            },
                            {
                                name: `–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:`,
                                value: adres
                            }],
                        }
                    });
                }
            }else if(code == '3'){
                let staff = guild.members.cache.filter(member => haveRole(member, Config.departments.med[2]));
                if(staff.size == 0){
                    sendLocalMessage(`**–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–µ–¥–∏–∫–∏ –Ω–∞ —Å–ª—É–∂–±–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç** ‚öïÔ∏è`);
                    sendLog(msgDate,'–†–ü','–ü–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Å–ª—É–∂–±—É.','–û—à–∏–±–∫–∞',`–í—ã–≤–æ–¥: **–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–µ–¥–∏–∫–∏ –Ω–∞ —Å–ª—É–∂–±–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç** ‚öïÔ∏è`)
                }else{
                    sendLocalMessage(`**–í—ã –≤—ã–∑—ã–≤–∞–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Å–ª—É–∂–±—É** ‚öïÔ∏è\n> ${text}`)
                    sendLog(msgDate,'–†–ü','–í—ã–∑–≤–∞–ª –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Å–ª—É–∂–±—É.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: **–í—ã –≤—ã–∑—ã–≤–∞–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Å–ª—É–∂–±—É** ‚öïÔ∏è\n> ${text}`)
                    guild.channels.cache.get(`860558917762940997`).send(`<@&${Config.departments.med[2]}>, ${msgDate.member.nickname} –≤—ã–∑–≤–∞–ª –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Å–ª—É–∂–±—É:`, {embed: {
                            thumbnail: {
                                url: `https://cdn.discordapp.com/emojis/822763786149691462.png?v=1`
                            },
                            fields: [{
                                name: `–¢–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞:`,
                                value: text
                            },
                            {
                                name: `–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:`,
                                value: adres
                            }],
                        }
                    });
                }
            }else{
                sendLocalMessage(`**–î–ª—è –≤—ã–∑–æ–≤–∞ —Å–ª—É–∂–± –ø–æ –Ω–æ–º–µ—Ä—É 911 –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ —Å–ª—É–∂–±—ã** ‚òéÔ∏è\n> 1 ‚Äì –ø–æ–∂–∞—Ä–Ω–∞—è —Å–ª—É–∂–±–∞.\n> 2 ‚Äì –ø–æ–ª–∏—Ü–∏—è.\n> 3 ‚Äì –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ª—É–∂–±–∞.`)
                sendLog(msgDate,'–†–ü','–í—ã–∑–≤–∞–ª 911 –±–µ–∑ –¥–æ–ø. –∫–æ–¥–∞.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: **–î–ª—è –≤—ã–∑–æ–≤–∞ —Å–ª—É–∂–± –ø–æ –Ω–æ–º–µ—Ä—É 911 –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ —Å–ª—É–∂–±—ã** ‚òéÔ∏è`)
            };
        }else{
            sendNullMessage()
        }
    }
    if (interaction.data.name == "admincall") {
        var arg = "";
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            arg = interaction.data.options[0].value
        }
    
        if(rpchannel){
            let staff = guild.members.cache.filter(member => (haveRole(member, '830061387849662515') || haveRole(member, '833226140755689483')) && member.presence.status != 'offline');
            if(staff.size == 0){
                sendLocalMessage(`**–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ —Å–µ—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–ª–∏ –∏—Ö –æ –≤–∞—à–µ–π –∂–∞–ª–æ–±–µ** üë•`)
                sendLog(msgDate,'–†–ü','–ü–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.','–û—à–∏–±–∫–∞',`–í—ã–≤–æ–¥: **–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ —Å–µ—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–ª–∏ –∏—Ö –æ –≤–∞—à–µ–π –∂–∞–ª–æ–±–µ** üë•`)
                guild.channels.cache.get(Config.channelsID.admin_claim).send(`<@&830061387849662515>, **${msgDate.author.tag} –Ω–∞–ø–∏—Å–∞–ª –∂–∞–ª–æ–±—É, –Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç –≤ —Å–µ—Ç–∏:**`, {embed: {
                        thumbnail: {
                            url: msgDate.author.displayAvatarURL()
                        },
                        fields: [{
                            name: `–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:`,
                            value: `${arg}`
                        },
                        {
                            name: `–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:`,
                            value: `${Config.globalObjects.find(obj => obj.id == channel.topic.split('-')[0]).name}, ${channel.parent.name} -> <#${channel.id}>`
                        }],
                    }
                });
            }else{
                sendLocalMessage(`**–í—ã –≤—ã–∑—ã–≤–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞** üë•\n> ${arg}`)
                sendLog(msgDate,'–†–ü','–í—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: **–í—ã –≤—ã–∑—ã–≤–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞** üë•\n> ${arg}`)

                for(let worker of staff){
                    worker[1].send(`**${msgDate.author.tag} –Ω–∞–ø–∏—Å–∞–ª –∂–∞–ª–æ–±—É:**`, {embed: {
                            thumbnail: {
                                url: msgDate.author.displayAvatarURL()
                            },
                            fields: [{
                                name: `–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:`,
                                value: `${arg}`
                            },
                            {
                                name: `–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:`,
                                value: `${Config.globalObjects.find(obj => obj.id == channel.topic.split('-')[0]).name}, ${channel.parent.name} -> <#${channel.id}>`
                            }],
                        }
                    });
                }
            }
        }else{
            sendNullMessage()
        }
    }
    if (interaction.data.name == "admin") {
        var arg = "";
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            interaction.data.options.forEach((c) => {
                if (c.name == "") {
                    arg = c.value;
                }
            });
        }
    
        if(rpchannel && (haveRole(msgDate.member, '830061387849662515') || head || rpCreator)){
            if(haveRole(msgDate.member, '835630198199681026')){
                sendNullMessage()
                setTimeout(() => {removeRole(msgDate.member, '835630198199681026'); channel.parent.updateOverwrite(msgDate.member, {'VIEW_CHANNEL': true})}, timeOfDelete*2);
                sendLog(msgDate,'–†–ü','–í—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω-–º–æ–¥–∞.','–£—Å–ø–µ—à–Ω–æ',` `)
            }
            if(!haveRole(msgDate.member, '835630198199681026')){
                sendNullMessage()
                setTimeout(() => {giveRole(msgDate.member, '835630198199681026'); channel.parent.permissionOverwrites.get(msgDate.author.id).delete()}, timeOfDelete*2);
                sendLog(msgDate,'–†–ü','–í–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω-–º–æ–¥.','–£—Å–ø–µ—à–Ω–æ',` `)
            }
        }else{
           sendNullMessage()
        }
    }
    if (interaction.data.name == "—à–∞–Ω—Å") {
        var arg = "";
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            interaction.data.options.forEach((c) => {
                if (c.name == "") {
                    arg = c.value;
                }
            });
        }
    
        if(rpchannel){
            let output = roll()
            sendLog(msgDate,'–†–ü','–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —à–∞–Ω—Å.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: –®–∞–Ω—Å: ${output} –∏–∑ 100`)
            sendGlobalMessage(`–®–∞–Ω—Å: ${output} –∏–∑ 100`)
        }else{
            sendNullMessage()
        }
    }
    if (interaction.data.name == "–≤—Ä–µ–º—è") {
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if(rpchannel){
            var today = new Date();
            sendLocalMessage(`–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è üïê\n> ${today.getUTCHours() + 3}:${today.getUTCMinutes()}:${today.getUTCSeconds()}`)
            sendLog(msgDate, '–†–ü', '–£–∑–Ω–∞–ª –≤—Ä–µ–º—è.', '–£—Å–ø–µ—à–Ω–æ', `–í—ã–≤–æ–¥: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è üïê\n> ${today.getUTCHours() + 3}:${today.getUTCMinutes()}:${today.getUTCSeconds()}`)
        }else{
            sendNullMessage()
        }
    }

    if (interaction.data.name == "tp") {
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        let locate = interaction.data.options[0].value
        let userTp
        if(interaction.data.options[1] != undefined){
            userTp = interaction.data.options[1].value
            console.log(userTp)
        }else{
            userTp = user.id
        }

        if(rpchannel && (haveRole(msgDate.member, '830061387849662515') || head || rpCreator)){
            if(guild.channels.cache.get(locate.slice(2,-1)) != undefined){
                let channelFA = guild.channels.cache.get(locate.slice(2,-1))
                let position = channelFA.name.slice(1, -1).toLowerCase().split('-').join(' ');

                console.log(position)
                let cats = guild.channels.cache.filter(cat => cat.type == 'category' && cat.name.toLowerCase().slice(3) == `¬´${position}¬ª`.toLowerCase());
                console.log(cats)
                //–∏—â–µ–º –∫–∞–Ω–∞–ª—ã —á—å–µ –∏–º—è –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ –∏–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç–∞ –ø—É—Ç–∏
                
                if(cats.length != 0){ for(let [id, cat] of cats){
                    let catId = Config.objects.find(obj => obj.cId == cat.id).id
                    console.log(catId)
                    if (catId == channelFA.topic.split('-')[0]){
                        for (let [id, channel] of guild.channels.cache){
                            if(channel.permissionOverwrites.get(userTp) != undefined && Config.objects.find(obj => obj.cId == id) != undefined) channel.permissionOverwrites.get(userTp).delete();
                        }
                        guild.channels.cache.get(cat.id).updateOverwrite(userTp ,{'VIEW_CHANNEL': true})

                        sendLocalMessage(`–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.`)
                    }else if (catId == channelFA.topic.split('-')[0]){
                        sendLocalMessage(`–û–±—ä–µ–∫—Ç ${argsObj} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`)
                    }
                }}else{sendNullMessage()}
            }else{sendNullMessage()}
        }else{
            sendNullMessage()
        }

    }
    /* if (interaction.data.name == "me") {
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            var arg = interaction.data.options[0].value
            arg = `${arg.slice(0,1).toUpperCase()}${arg.slice(1)}`
            var ping
            var text = `*${arg}*`
            if (interaction.data.options[1] != undefined){
                var userG = interaction.data.options[1].value
                ping = `<@!${userG}>`
            }
            let color = `#ECCB12`

            if(rpchannel){
                sendEditMessage(text, color, undefined, ping)
            }else{
                sendNullMessage()
            }
        }
    }
    if (interaction.data.name == "do") {
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            var arg = interaction.data.options[0].value
            arg = `${arg.slice(0,1).toUpperCase()}${arg.slice(1)}`
            var ping
            var text = `> ${arg}`
            var color = `#5865F2`
            if (interaction.data.options[1] != undefined){
                var userG = interaction.data.options[1].value
                ping = `<@!${userG}>`
            }

            if(rpchannel){
                sendEditMessage(text, color, undefined, ping)
            }else{
                sendNullMessage()
            }
        }
    }
    if (interaction.data.name == "todo") {
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            var talk = interaction.data.options[0].value
            var arg = interaction.data.options[1].value
            var ping
            arg = `${arg.slice(0,1).toLowerCase()}${arg.slice(1)}`
            var text = ` - *–°–∫–∞–∑–∞–≤, <@!${msgDate.member.id}> ${arg}*`
            var color = `#57D9BF`
            if(talk.slice(-1) == '!'){ text = ` - *–ö—Ä–∏–∫–Ω—É–≤, ${msgDate.member.nickname.split(' ')[0]} ${arg}*`; color = `#C9243F`}
            if(talk.slice(-1) == '?'){ text = ` - *–°–ø—Ä–æ—Å–∏–≤, ${msgDate.member.nickname.split(' ')[0]} ${arg}*`; color = `#24C937`}

            if (interaction.data.options[2] != undefined){
                var userG = interaction.data.options[2].value
                ping = `<@!${userG}>`
            }

            if(rpchannel){
                sendEditMessage(text, color, talk, ping)
            }else{
                sendNullMessage()
            }
        }
    }
    if (interaction.data.name == "gdo") {
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            var arg = interaction.data.options[0].value
            arg = `${arg.slice(0,1).toUpperCase()}${arg.slice(1)}`
            var text = `> **${arg}**`
            let color = `#3E49C0`

            if(rpchannel){
                sendEditMessage(text, color)
            }else{
                sendNullMessage()
            }
        }
    }
    if (interaction.data.name == "local") {
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if (interaction.data.options == undefined) {
        }else{
            var arg = interaction.data.options[0].value
            var text = `(( ${arg} ))`
            let color = `#818181`

            if(rpchannel){
                sendEditMessage(text, color)
            }else{
                sendNullMessage()
            }
        }
    } */
    if (interaction.data.name == "–º–æ–Ω–µ—Ç–∞") {
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if(rpchannel){
            let output = coinFlip()
            if(interaction.data.options == undefined){
                sendLog(msgDate,'–†–ü','–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –º–æ–Ω–µ—Ç–∫—É.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: –í—ã–ø–∞–ª(-–∞): ${output}`)
                sendLocalMessage(`–í—ã–ø–∞–ª(-–∞): ${output}`)
            }else if(interaction.data.options[0].value == 'true'){
                sendLog(msgDate,'–†–ü','–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –º–æ–Ω–µ—Ç–∫—É.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: –í—ã–ø–∞–ª(-–∞): ${output}`)
                sendGlobalMessage(`–í—ã–ø–∞–ª(-–∞): ${output}`)
            }
        }else{
            sendNullMessage()
        }
    }

    if (interaction.data.name == "–∫–∞—Ä—Ç—ã") {
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if(rpchannel){
            console.log(interaction.data.options)
            let output = card()
            if(interaction.data.options == undefined){
                sendLog(msgDate,'–†–ü','–í—ã—Ç—è–Ω—É–ª –∫–∞—Ä—Ç—É.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: –î–æ—Å—Ç–∞–ª –∫–∞—Ä—Ç—É: ${output}`)
                sendLocalMessage(`–î–æ—Å—Ç–∞–ª: ${output}`)
            }else if(interaction.data.options[0].value == 'true'){
                sendLog(msgDate,'–†–ü','–í—ã—Ç—è–Ω—É–ª –∫–∞—Ä—Ç—É.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: –î–æ—Å—Ç–∞–ª –∫–∞—Ä—Ç—É: ${output}`)
                sendGlobalMessage(`–î–æ—Å—Ç–∞–ª: ${output}`)
            }
        }else{
            sendNullMessage()
        }
    }

    if (interaction.data.name == "–∫—É–±–∏–∫") {
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if(rpchannel){
            let output = cube()
            if(interaction.data.options == undefined){
                sendLog(msgDate,'–†–ü','–ë—Ä–æ—Å–∏–ª –∫—É–±–∏–∫.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: –í—ã–±—Ä–∞—Å–∏–ª —á–∏—Å–ª–æ: ${output}`)
                sendLocalMessage(`–í—ã–±—Ä–æ—Å–∏–ª: ${output}`)
            }else if(interaction.data.options[0].value == 'true'){
                sendLog(msgDate,'–†–ü','–ë—Ä–æ—Å–∏–ª –∫—É–±–∏–∫.','–£—Å–ø–µ—à–Ω–æ',`–í—ã–≤–æ–¥: –í—ã–±—Ä–∞—Å–∏–ª —á–∏—Å–ª–æ: ${output}`)
                sendGlobalMessage(`–í—ã–±—Ä–æ—Å–∏–ª: ${output}`)
            }
        }else{
            sendNullMessage()
        }
    }

    if (interaction.data.name == "nsfw") {
        let msgDate = {author: user.user, channel: channel, content: arg, member: user};
        if(haveRole(user, `871027221521899621`) && interaction['guild_id'] == undefined){
            client.api.interactions(interaction.id, interaction.token).callback.post({
                data: {
                    type: 4,
                    data:{
                        embeds: [{
                            fields: [{
                                name: `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–µ–ª–∞–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ NSFW –∫–∞–Ω–∞–ª–∞–º?`,
                                value: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.'
                            }],
                            thumbnail: {
                                url: 'https://i.imgur.com/utuBexR.png'
                            },
                        }],
                        components: [
                            {
                                type: 1,
                                components: [
                                    {
                                        type: 2,
                                        label: "‚úÖ –î–∞",
                                        style: 3,
                                        custom_id: "yesNSFW"
                                    },
                                    {
                                        type: 2,
                                        label: "‚ùå –ù–µ—Ç",
                                        style: 4,
                                        custom_id: "noNSFW"
                                    },
                                ]
                            }
                        ],
                        //flags: 64
                    }
                }
            })
        }else if(!haveRole(user, `871027221521899621`) && interaction['guild_id'] == undefined){
            client.api.interactions(interaction.id, interaction.token).callback.post({
                data: {
                    type: 4,
                    data:{
                        embeds: [{
                            fields: [{
                                name: `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ NSFW –∫–∞–Ω–∞–ª–∞–º?`,
                                value: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.'
                            }],
                            thumbnail: {
                                url: 'https://i.imgur.com/cjSSwtu.png'
                            },
                        }],
                        components: [
                            {
                                type: 1,
                                components: [
                                    {
                                        type: 2,
                                        label: "‚úÖ –î–∞",
                                        style: 3,
                                        custom_id: "yesNSFW"
                                    },
                                    {
                                        type: 2,
                                        label: "‚ùå –ù–µ—Ç",
                                        style: 4,
                                        custom_id: "noNSFW"
                                    },
                                ]
                            }
                        ],
                        //flags: 64
                    }
                }
            })
        }else{
            sendLocalMessage('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å <@!822500483826450454>')
        }
    }

    if(interaction.data.name == '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'){
        if(interaction['guild_id'] == undefined){
            Stats(msgDate);
        }else{
            sendLocalMessage('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å <@!822500483826450454>')
        }
        sendGlobalMessage('‚†Ä')
    }
});
    


function checkIntegrations() {

    /* 
    –ë–õ–û–ö –°–ü–ò–°–ö–ê –ö–û–ú–ê–ù–î
    */

    /* let command = {
        name: "–∫–∞—Ä—Ç—ã", 
        description: "–í—ã—Ç–∞—â–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã",
        options: [
            {
                name: "–æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å",
                description: "–î–æ—Å—Ç–∞—Ç—å –ª–∏ –∫–∞—Ä—Ç—É –≤ –æ—Ç–∫—Ä—ã—Ç—É—é?",
                type: "3",
                choices: [
                    {
                        name: "–î–∞",
                        value: "true"
                    }
                ]
            }
        ]
    }
    let command2 = {
        name: "–º–æ–Ω–µ—Ç–∞", 
        description: "–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É",
        options: [
            {
                name: "–æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å",
                description: "–ë—Ä–æ—Å–∏—Ç—å –ª–∏ –º–æ–Ω–µ—Ç—É –≤ –æ—Ç–∫—Ä—ã—Ç—É—é?",
                type: "3",
                choices: [
                    {
                        name: "–î–∞",
                        value: "true"
                    }
                ]
            }
        ]
    }
    let command3 = {
        name: "–∫—É–±–∏–∫", 
        description: "–ë—Ä–æ—Å–∏—Ç—å –∏–≥—Ä–∞–ª—å–Ω—ã–π –∫—É–±–∏–∫",
        options: [
            {
                name: "–æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å",
                description: "–ë—Ä–æ—Å–∏—Ç—å –ª–∏ –∫—É–±–∏–∫ –≤ –æ—Ç–∫—Ä—ã—Ç—É—é?",
                type: "3",
                choices: [
                    {
                        name: "–î–∞",
                        value: "true"
                    }
                ]
            }
        ]
    }

    client.interaction.createApplicationCommand(command, config.guild_id, "859131311692316682").then(console.log)
    client.interaction.createApplicationCommand(command2, config.guild_id, "864551702278570014").then(console.log)
    client.interaction.createApplicationCommand(command3, config.guild_id, "864610902053355529").then(console.log) */

    // —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
    /* client.interaction
        .getApplicationCommands(config.guild_id)
        .then(d => {
            d.forEach((r) => {
                client.interaction
                    .deleteApplicationCommand(r.id, config.guild_id)
                    .then()
                    .catch(console.log);
            })
        })
        .catch(console.log); */

    // —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö
    /* setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "–æ—Å–º–æ—Ç—Ä", 
            description: "–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞",
            options: []
        }, config.guild_id)
        .then()
        .catch(console.error);
    }, 200);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "–∏–¥—Ç–∏", 
            description: "–ò–¥—Ç–∏ —Å –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –¥—Ä—É–≥–æ–π",
            options: [
                {
                    name: "–ø—É—Ç—å",
                    description: "–ü—É—Ç—å, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.",
                    type: "3",
                    required: true
                }
            ]
        }, config.guild_id)
        .then(console.log)
        .catch(console.error);
    }, 200);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "–±–∞–ª–∞–Ω—Å", 
            description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å",
            options: []
        }, config.guild_id)
        .then()
        .catch(console.error);
    }, 200);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "–∑–∞–ø–ª–∞—Ç–∏—Ç—å", 
            description: "–î–∞—Ç—å –∫–æ–º—É-—Ç–æ –¥–µ–Ω—å–≥–∏",
            options: [
                {
                    name: "–∏–≥—Ä–æ–∫",
                    description: "–ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏",
                    type: "6",
                    required: true
                },
                {
                    name: "—Å—É–º–º–∞",
                    description: "–°—É–º–º–∞ –¥–µ–Ω–µ–≥",
                    type: "4",
                    required: true
                },
            ]
        }, config.guild_id)
        .then(console.log)
        .catch(console.error);
    }, 200);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "—Ä–µ–∫–ª–∞–º–∞", 
            description: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –∑–∞ 100$",
            options: [
                {
                    name: "—Ç–µ–∫—Å—Ç",
                    description: "–¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã",
                    type: "3",
                    required: true
                },
            ]
        }, config.guild_id)
        .then(console.log)
        .catch(console.error);
    }, 120000);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", 
            description: "–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –≥–æ—Ä–æ–¥",
            options: [
                {
                    name: "—Ç–µ–∫—Å—Ç",
                    description: "–¢–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
                    type: "3",
                    required: true
                },
            ]
        }, config.guild_id)
        .then(console.log)
        .catch(console.error);
    }, 10000);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "—Ñ–æ—Ä–º–∞", 
            description: "–í–∑—è—Ç—å —Ñ–æ—Ä–º—É",
            options: []
        }, config.guild_id)
        .then(console.log)
        .catch(console.error);
    }, 80000);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "911", 
            description: "–í—ã–∑–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã",
            options: [
                {
                    name: "–∫–æ–¥",
                    description: "–ö–æ–¥ —Å–ª—É–∂–±—ã",
                    type: "3"
                },
                {
                    name: "—Ç–µ–∫—Å—Ç",
                    description: "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±",
                    type: "3"
                },
            ]
        }, config.guild_id)
        .then(console.log)
        .catch(console.error);
    }, 60000);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "admincall", 
            description: "–í—ã–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            options: [
                {
                    name: "—Ç–µ–∫—Å—Ç",
                    description: "–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã",
                    type: "3",
                    required: true
                },
            ]
        }, config.guild_id)
        .then(console.log)
        .catch(console.error);
    }, 40000);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "admin", 
            description: "–ó–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –ø–æ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            options: []
        }, config.guild_id)
        .then(console.log)
        .catch(console.error);
    }, 22000); 
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "—à–∞–Ω—Å", 
            description: "–®–∞–Ω—Å (—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100)",
            options: []
        }, config.guild_id)
        .then()
        .catch(console.error);
    }, 200);*/
    /* setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "–∫–∞—Ä—Ç—ã", 
            description: "–í—ã—Ç–∞—â–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã",
            options: []
        }, config.guild_id)
        .then()
        .catch(console.error);
    }, 200);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "–≤—Ä–µ–º—è", 
            description: "–£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è",
            options: []
        }, config.guild_id)
        .then()
        .catch(console.error);
    }, 200);
    client.interaction.createApplicationCommand({
        name: "tp", 
        description: "–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –ª–æ–∫–∞—Ü–∏—é",
        options: [
            {
                name: "–ª–æ–∫–∞—Ü–∏—è",
                description: "–õ–æ–∫–∞—Ü–∏—è, –∫—É–¥–∞ –Ω—É–∂–Ω–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                type: "3",
                required: true
            },
            {
                name: "—á–µ–ª–æ–≤–µ–∫",
                description: "–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–º—É —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É —ç—Ç–æ –≤—ã",
                type: "6",
            },
        ]
    }, config.guild_id)
    client.interaction.createApplicationCommand({
        name: "me", 
        description: "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞.",
        options: [
            {
                name: "–¥–µ–π—Å—Ç–≤–∏–µ",
                description: "–î–µ–π—Å—Ç–≤–∏–µ",
                type: "3",
                required: true
            },
            {
                name: "—á–µ–ª–æ–≤–µ–∫",
                description: "–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–º—É —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ",
                type: "6"
            },
        ]
    }, config.guild_id)
    .then()
    .catch(console.error);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "do", 
            description: "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞, –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤–æ–∫—Ä—É–≥.",
            options: [
                {
                    name: "–¥–µ–π—Å—Ç–≤–∏–µ",
                    description: "–î–µ–π—Å—Ç–≤–∏–µ",
                    type: "3",
                    required: true
                },
                {
                    name: "—á–µ–ª–æ–≤–µ–∫",
                    description: "–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–º—É —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ",
                    type: "6"
                },
            ]
        }, config.guild_id)
        .then()
        .catch(console.error);
    }, 200);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "todo", 
            description: "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞, –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤–æ–∫—Ä—É–≥, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑–æ–π.",
            options: [
                {
                    name: "—Ñ—Ä–∞–∑–∞",
                    description: "–§—Ä–∞–∑–∞",
                    type: "3",
                    required: true
                },
                {
                    name: "–¥–µ–π—Å—Ç–≤–∏–µ",
                    description: "–î–µ–π—Å—Ç–≤–∏–µ",
                    type: "3",
                    required: true
                },
                {
                    name: "—á–µ–ª–æ–≤–µ–∫",
                    description: "–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–º—É —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ",
                    type: "6"
                },
            ]
        }, config.guild_id)
        .then()
        .catch(console.error);
    }, 200);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "gdo", 
            description: "–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞, –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º—É –æ–±—ä–µ–∫—Ç—É.",
            options: [
                {
                    name: "–¥–µ–π—Å—Ç–≤–∏–µ",
                    description: "–î–µ–π—Å—Ç–≤–∏–µ",
                    type: "3",
                    required: true
                },
            ]
        }, config.guild_id)
        .then()
        .catch(console.error);
    }, 200);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "local", 
            description: "–ù–µ—Ä–æ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            options: [
                {
                    name: "—Ç–µ–∫—Å—Ç",
                    description: "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
                    type: "3",
                    required: true
                },
            ]
        }, config.guild_id)
        .then()
        .catch(console.error);
    }, 200);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "–º–æ–Ω–µ—Ç–∞", 
            description: "–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É",
            options: []
        }, config.guild_id)
            .then()
            .catch(console.error);
    }, 200);
    setTimeout(() =>{client.interaction.createApplicationCommand({
            name: "–∫—É–±–∏–∫", 
            description: "–ë—Ä–æ—Å–∏—Ç—å –∏–≥—Ä–∞–ª—å–Ω—ã–π –∫—É–±–∏–∫",
            options: []
        }, config.guild_id)
            .then()
            .catch(console.error);
    }, 200);*/
    /* setTimeout(() =>{client.interaction.createApplicationCommand({
        name: "nsfw", 
        description: "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ NSFW –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–µ—Ä–∞",
        options: []
    }, null)
        .then(console.log)
        .catch(console.log);
    }, 200); 
    setTimeout(() =>{client.interaction.createApplicationCommand({
        name: "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", 
        description: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
        options: []
    }, null)
        .then(console.log)
        .catch(console.log);
    }, 200);*/
}

/* client.on('error', err => {
    console.log('–û—à–∏–±–∫–∞!')
    guild.channels.cache.get(Config.channelsID.serverMsg).send('> –ë–æ—Ç –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫—É!', {embed: {
                color: 16325403,
                fields: [{
                    name: `[${err.name}]:`,
                    value: err.message
                }],
                
                timestamp: new Date()
            }
        }
    )
}); */

client.login(Config.discordTocens.main)