const {
    client, REST, Routes,
    Config, prefix, timeOfDelete,
    guildBase, guildAges, guildBD, 
    rpGuilds, cmdParametrs, getMessages, toChannelName, betterLimitText, random,
    getRoleId, haveRole, giveRole, removeRole,
    sendLog, createLore, createEx,
    createCom, SlashCom, ReplyInteraction, ErrorInteraction, BDunit,
    GStats, AStats, EStats,
    DStats, RPF} = require('../bot.js')

const guild = guildAges
const getUnicode = require('emoji-unicode')

console.log(`[bot-ages ready]`)

SlashCom('wait', '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', {
    name: '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å',
    description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å',
    type: 'CHAT_INPUT'
}, guild.id)

SlashCom('wait', '–æ—Å–º–æ—Ç—Ä–µ—Ç—å', {
    name: '–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
    description: '–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –≤–æ–∫—Ä—É–≥, –∞ —Ç–∞–∫–∂–µ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
    type: 'CHAT_INPUT',
    options: [
        {
            type: 'USER',
            name: '—á–µ–ª–æ–≤–µ–∫',
            description: '–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–ª–µ–¥—É–µ—Ç –æ—Å–º–æ—Ç—Ä–µ—Ç—å',
            required: false,
        }
    ],
}, guild.id)

SlashCom('wait', '–∏–¥—Ç–∏', {
    name: '–∏–¥—Ç–∏',
    description: '–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–π—Ç–∏ –≤ –ª–æ–∫–∞—Ü–∏—é, –Ω–∞—Ö–æ–¥—è—â—É—é—Å—è –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏',
    type: 'CHAT_INPUT',
}, guild.id)

SlashCom('wait', '–ø–µ—Ä—Å–æ–Ω–∞–∂–∏', {
    name: '–ø–µ—Ä—Å–æ–Ω–∞–∂–∏',
    description: '–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏',
    type: 'CHAT_INPUT',
}, guild.id)

SlashCom('wait', '—Ç–µ–ª–µ–ø–æ—Ä—Ç', {
    name: '—Ç–µ–ª–µ–ø–æ—Ä—Ç',
    description: '–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é',
    type: 'CHAT_INPUT',
    options: [
        {
            type: 'USER',
            name: '—á–µ–ª–æ–≤–µ–∫',
            description: '–¶–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—ã)',
            required: false,
        }
    ],
}, guild.id)

client.on('messageCreate', message => { if(message.guild?.id == guild.id){
    var cA = haveRole(message.member, "[A]"),
        cB = haveRole(message.member, "[B]"),
        cC = haveRole(message.member, "[C]")
    let mb = message.author.bot
    let dm = message.channel.type == "DM"
    let command = cmdParametrs(message.content)

    if(!mb && message.content == '!test'){
        RPF.createObjects("ages/objects", guild)
    }

    if(!mb && !dm) sendLog(message.member, message.channel, 'rp', '–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ', true, message.content)
}})

client.on('interactionCreate', async interaction => {
    if(interaction.guildId == guild.id) try{
        let type = interaction.customId?.split('_')[0]
        let act = interaction.customId?.split('_')[1]
        let data = interaction.customId?.split('_')[2]
        let add = interaction.customId?.split('_')[3]

        let values = interaction.values
        let value = values?.[0]

        let charPass = (type == 'char' || interaction.commandName == '–ø–µ—Ä—Å–æ–Ω–∞–∂–∏') && !interaction.channel.parent.position
        
        var objects = await GStats("ages/objects")
        if(!objects) throw new Error("–û–±—ä–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        let object = objects.find(object => object.data.cid == interaction.channel.parentId)
        if(!object && !charPass) throw new Error("–§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ —Ä–æ–ª–µ–≤–æ–≥–æ –ø–æ–ª—è")

        let roomId = parseInt(interaction.channel.topic)
        let room = object?.data.rooms[roomId]
        if(!room && !charPass) throw new Error("–§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ —Ä–æ–ª–µ–≤–æ–≥–æ –ø–æ–ª—è")

        var items = await GStats("ages/items")
        if(!items) throw new Error("–ü—Ä–µ–¥–º–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        var players = await GStats("ages/players")
        if(!players) throw new Error("–ò–≥—Ä–æ–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        var player = players.find(player => player.data.user == interaction.user.id)
        if(!player) throw new Error("–ò–≥—Ä–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        var chars = await GStats("ages/chars")
        if(!chars) throw new Error("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        var char = chars.find(char => char.id == player.data.char && player.data.chars?.find(fChar => fChar == char.id))
        if(!char && !charPass) throw new Error("–ü–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        if(interaction.isCommand()){
            if(interaction.commandName == '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'){
                let options = RPF.itemsSelectMenuOptions(items, char.data.items)
                if(!options.length) throw new Error("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç")

                interaction.reply({
                    content: '> –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å üíº',
                    components: [
                        {
                            type: 'ACTION_ROW', 
                            components: [
                                {
                                    type: 'SELECT_MENU',
                                    customId: `invent_open`,
                                    placeholder: '–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã...',
                                    minValues: 1,
                                    maxValues: (() =>{
                                        if(options.length < 5){
                                            return options.length
                                        }else{
                                            return 5
                                        }
                                    })(),
                                    options: options
                                }
                            ]
                        }
                    ],
                    ephemeral: true
                })
            }

            if(interaction.commandName == '–æ—Å–º–æ—Ç—Ä–µ—Ç—å'){
                let options = RPF.itemsSelectMenuOptions(items, room.items)

                interaction.reply({
                    content: '> –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å–º–æ—Ç—Ä–∞ üëÄ',
                    embeds: [
                        {
                            description: `> **–†–∞–¥–∏—É—Å** üîò\n${
                                (() => {
                                    let returnRadius = ''
                                    for(let i = 0; i < object.data.radius.length; i++){
                                        let radiusObject = objects.find(fObject => fObject.id == object.data.radius[i].id)
                                        if(returnRadius == ''){
                                            returnRadius = radiusObject.data.name
                                        }else if(i % 3 == 0){
                                            returnRadius += `,\n${radiusObject.data.name}`
                                        }else{
                                            returnRadius += `, ${radiusObject.data.name}`
                                        }
                                    }
                                    return returnRadius
                                })()
                            }`,
                            color: '#ED7642'
                        }
                    ],
                    components: (() => {
                        if(options.length != 0){
                            return [{
                                type: 'ACTION_ROW', 
                                components: [
                                    {
                                        type: 'SELECT_MENU',
                                        customId: `invent_pick`,
                                        placeholder: '–ü—Ä–µ–¥–º–µ—Ç—ã...',
                                        minValues: 1,
                                        maxValues: (() =>{
                                            if(options.length < 5){
                                                return options.length
                                            }else{
                                                return 5
                                            }
                                        })(),
                                        options: options
                                    }
                                ]
                            }]
                        }
                    })(),
                    ephemeral: true
                })
            }

            if(interaction.commandName == '–∏–¥—Ç–∏'){
                if(char.data.pos != object.id && char.data.pos) throw new Error(`–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤–Ω–µ –æ–±—ä–µ–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å (**${objects.find(object => object.id == char.data.pos)?.data.name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}**). –í—ã –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏ –Ω–∞ –∫–æ—Ç–∞ –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞ üêà‚Äç‚¨õ`)
                
                let options = RPF.objectsSelectMenuOptions(object, objects, true, false)
                if(options.length == 0) throw new Error("–û–±—ä–µ–∫—Ç–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç")

                let components = RPF.pageButtonsSelectMenu('walk_select', '–û–±—ä–µ–∫—Ç—ã...', options, 'walk')
                
                interaction.reply({
                    content: '> –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üö∂',
                    components: components,
                    ephemeral: true
                })
            }

            if(interaction.commandName == '–ø–µ—Ä—Å–æ–Ω–∞–∂–∏'){
                let options = RPF.charsSelectMenuOptions(player.data.chars, player.data.char, chars)
                
                let createButton = {
                    type: 'ACTION_ROW',
                    components: [
                        {
                            type: 'BUTTON',
                            label: '–°–æ–∑–¥–∞—Ç—å',
                            customId: 'char_create',
                            style: 'PRIMARY'
                        }
                    ]
                }

                let components
                if(!(player.data.chars?.length ?? 0)){
                    components = [createButton]
                }else{
                    if(!options.length){
                        throw new Error('–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
                    }else if((player.data.limit ?? 1) > (player.data.chars?.length ?? 0)){
                        components = RPF.pageButtonsSelectMenu('char_select', '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏...', options, 'char')
                        components.splice(1, 0, createButton)
                    }else{
                        components = RPF.pageButtonsSelectMenu('char_select', '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏...', options, 'char')
                    }
                }

                interaction.reply({
                    content: '> –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ üë•',
                    components: components,
                    ephemeral: true
                })
            }

            if(interaction.commandName == '—Ç–µ–ª–µ–ø–æ—Ä—Ç'){
                let selectUserId = interaction.options?.get('—á–µ–ª–æ–≤–µ–∫')?.value ?? interaction.user.id

                let options = RPF.objectsSelectMenuOptions(object, objects, false, selectUserId != interaction.user.id)
                if(options.length == 0) throw new Error("–û–±—ä–µ–∫—Ç–æ–≤ –Ω–µ—Ç")

                let components = RPF.pageButtonsSelectMenu(`tp_select_${selectUserId}`, '–û–±—ä–µ–∫—Ç—ã...', options, 'tp', 0, selectUserId)
                
                interaction.reply({
                    content: '> –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üõ∏',
                    components: components,
                    ephemeral: true
                })
            }
        }

        if(interaction.isSelectMenu()){
            if(type == 'invent' && act == 'open'){
                let gItems = []
                let charItems = []
                let embeds = []

                let options = RPF.itemsSelectMenuOptions(items, char.data.items)
                if(options.length == 0) throw new Error("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç")

                for(let value of values){
                    value = value.split('-') //id –∏ convar

                    let gItem = items.find(fItem => fItem.id == value[0])
                    if(!gItem) throw new Error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                    gItems.push(gItem)

                    let charItem = char.data.items?.find(item => (!value[1] && item.id == gItem.id) || (value[1] && item.id == gItem.id && item.convar == value[1]))
                    if(!charItem) throw new Error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –≤–∞—à–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
                    charItems.push(charItem)

                    let emoji = getUnicode(gItem.data.emoji ?? 'üì¶').split(' ').join('-')
                    embeds.push({
                        author: {name: `[${char.data.items.indexOf(charItem)+1}] ${gItem.data.name} (x${charItem.count.toLocaleString('en')})` },
                        description: gItem.data.desc,
                        thumbnail: {url: `https://twemoji.maxcdn.com/v/13.1.0/72x72/${emoji}.png`},
                        color: gItem.data.color ?? Config.itemTypes[gItem.data.type]?.color ?? 'RANDOM'
                    })
                }

                let itemComponents = [
                    {
                        type: 'BUTTON',
                        label: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å',
                        customId: `invent_use_${values.join(';')}`,
                        style: 'PRIMARY'
                    },
                    {
                        type: 'BUTTON',
                        label: '–ü–µ—Ä–µ–¥–∞—Ç—å',
                        customId: `invent_trade_${values.join(';')}`,
                        style: 'SUCCESS'
                    },
                    {
                        type: 'BUTTON',
                        label: '–í—ã–±—Ä–æ—Å–∏—Ç—å',
                        customId: `invent_drop_${values.join(';')}`,
                        style: 'DANGER'
                    }
                ]

                if(values.length > 1 || !Config.itemTypes[gItems[0].data.type].usable) itemComponents[0].disabled = true

                interaction.update({
                    content: '> –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å üíº',
                    embeds: embeds,
                    components: [
                        {
                            type: 'ACTION_ROW', 
                            components: [
                                {
                                    type: 'SELECT_MENU',
                                    customId: `invent_open`,
                                    placeholder: '–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã...',
                                    minValues: 1,
                                    maxValues: (() =>{
                                        if(options.length < 5){
                                            return options.length
                                        }else{
                                            return 5
                                        }
                                    })(),
                                    options: options
                                }
                            ]
                        },
                        {
                            type: 'ACTION_ROW',
                            components: itemComponents
                        },
                    ]
                })
            }else if(type == 'invent' && act == 'pick'){
                let gItems = []
                let roomItems = []
                let embeds = []

                let options = RPF.itemsSelectMenuOptions(items, room.items)
                if(options.length == 0) throw new Error("–ö–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞")
                
                for(let value of values){
                    value = value.split('-') //id –∏ convar

                    let gItem = items.find(fItem => fItem.id == value[0])
                    if(!gItem) throw new Error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                    gItems.push(gItem)

                    let roomItem = room.items?.find(item => (!value[1] && item.id == gItem.id) || (value[1] && item.id == gItem.id && item.convar == value[1]))
                    if(!roomItem) throw new Error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –∫–æ–º–Ω–∞—Ç—ã")
                    roomItems.push(roomItem)

                    let emoji = getUnicode(gItem.data.emoji ?? 'üì¶').split(' ').join('-')
                    embeds.push({
                        author: {name: `[${room.items.indexOf(roomItem)+1}] ${gItem.data.name} (x${roomItem.count.toLocaleString('en')})` },
                        description: gItem.data.desc,
                        thumbnail: {url: `https://twemoji.maxcdn.com/v/13.1.0/72x72/${emoji}.png`},
                        color: gItem.data.color ?? Config.itemTypes[gItem.data.type]?.color ?? 'RANDOM'
                    })
                }

                interaction.update({
                    content: '> –ü—Ä–µ–¥–º–µ—Ç—ã üì¶',
                    embeds: embeds,
                    components: [
                        {
                            type: 'ACTION_ROW', 
                            components: [
                                {
                                    type: 'SELECT_MENU',
                                    customId: `invent_pick`,
                                    placeholder: '–ü—Ä–µ–¥–º–µ—Ç—ã...',
                                    minValues: 1,
                                    maxValues: (() =>{
                                        if(options.length < 5){
                                            return options.length
                                        }else{
                                            return 5
                                        }
                                    })(),
                                    options: options
                                }
                            ]
                        },
                        {
                            type: 'ACTION_ROW',
                            components: [
                                {
                                    type: 'BUTTON',
                                    label: '–í–∑—è—Ç—å',
                                    customId: `invent_take_${values.join(';')}`,
                                    style: 'SUCCESS'
                                }
                            ]
                        },
                    ]
                })
            }else if(type == 'invent' && act == 'key'){
                let object = objects.find(object => object.id == value)
                if(!object) throw new Error("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

                let gItem = items.find(fItem => fItem.id == data)
                if(!gItem) throw new Error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏")

                let lItem = char.data.items.find(fItem => fItem.id == gItem.id)
                if(!lItem) throw new Error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏")
                
                if(object.data.status){
                    if(lItem.convar == object.id){
                        interaction.update({content: `> –ü—Ä–æ—Ü–µ—Å—Å... üîê`, embeds: [], components: []})
                        setTimeout(() => {
                            try{
                                if(object.data.status.open){
                                    interaction.editReply({content: `> –í—ã –∑–∞–∫—Ä—ã–ª–∏ –æ–±—ä–µ–∫—Ç üîí`})
                                    EStats("ages/objects", object.id, "status.open", [false])
                                }else if(!object.data.status.open){
                                    interaction.editReply({content: `> –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –æ–±—ä–µ–∫—Ç üîì`})
                                    EStats("ages/objects", object.id, "status.open", [true])
                                }
                            }catch(error){
                                ErrorInteraction(interaction, error, true)
                            }
                        }, 2500)
                    }else{
                        interaction.update({content: `> –ö–ª—é—á –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –æ–±—ä–µ–∫—Ç—É üîê`, embeds: [], components: []})
                    }
                }else{
                    interaction.update({content: `> –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å ‚õî`, embeds: [], components: []})
                }
            }else if(type == 'walk' && act == 'select'){
                let targetObject = objects.find(object => object.id == value)
                if(!targetObject) throw new Error("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                let channelTargetObject = guild.channels.cache.get(targetObject.data.cid)
                if(!channelTargetObject) throw new Error("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

                interaction.update({content: `> –ü—Ä–æ—Ü–µ—Å—Å... üö∂`, embeds: [], components: []})
                setTimeout(() => {
                    try{
                        function walk(){
                            RPF.step(interaction, interaction.user.id, char, objects, targetObject, channelTargetObject, `> –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ **${channelTargetObject.name}** üö∂`)
                        }

                        if(!object.data.status){
                            walk()
                        }else if(!object.data.status?.open && !targetObject.data.status?.ex?.find(ex => ex == object.id)){
                            throw new Error("–í–∞—à –æ–±—ä–µ–∫—Ç –∑–∞–∫—Ä—ã—Ç")
                        }else if(!targetObject.data.status){
                            walk()
                        }else if(targetObject.data.status?.open){
                            walk()
                        }else if(targetObject.data.status?.ex?.find(ex => ex == object.id)){
                            walk()
                        }else{
                            throw new Error("–û–±—ä–µ–∫—Ç –∑–∞–∫—Ä—ã—Ç")
                        }
                    }catch(error){
                        ErrorInteraction(interaction, error, true)
                    }
                }, 2500)
            }else if(type == 'tp' && act == 'select'){
                let player = players.find(player => player.data.user == data)
                if(!player) throw new Error("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

                let char = chars.find(char => char.id == player.data.char)
                if(!char) throw new Error("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

                let targetObject = objects.find(object => object.id == value)
                if(!targetObject) throw new Error("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                let channelTargetObject = guild.channels.cache.get(targetObject.data.cid)
                if(!channelTargetObject) throw new Error("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

                RPF.step(interaction, player.data.user, char, objects, targetObject, channelTargetObject, `> –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ª–µ—Ç–µ–ª–∏ –≤ **${channelTargetObject.name}** üõ∏`)
            }else if(type == 'char' && act == 'select'){
                let options = RPF.charsSelectMenuOptions(player.data.chars, player.data.char, chars)
                if(!options) throw new Error('–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')

                let char = chars.find(char => char.id == value)
                if(!char) throw new Error("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

                if(!player.data.chars?.find(fChar => fChar == char.id)) throw new Error("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

                let components = RPF.pageButtonsSelectMenu('char_select', '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏...', options, 'char')
                components.splice(1, 0, {
                    type: 'ACTION_ROW',
                    components: [
                        {
                            type: 'BUTTON',
                            label: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å',
                            customId: `char_use_${char.id}`,
                            style: 'PRIMARY'
                        },
                        {
                            type: 'BUTTON',
                            label: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                            customId: `char_edit_${char.id}`,
                            style: 'SUCCESS'
                        },
                    ]
                })

                if(player.data.char == char.id){
                    components[1].components[0].disabled = true
                }

                let emoji = getUnicode(char.data.emoji ?? 'üë§').split(' ').join('-')
                interaction.update({
                    content: '> –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ üë•',
                    embeds: [{
                        author: {name: `[${player.data.chars.indexOf(char.id)+1}] ${betterLimitText(char.data.name, 100)} ${char.id == player.data.char ? "‚úÖ" : ""}`},
                        description: char.data.desc,
                        thumbnail: {url: `https://twemoji.maxcdn.com/v/13.1.0/72x72/${emoji}.png`},
                        color: 'RANDOM',
                    }],
                    components: components
                })
                
            }
        }

        if(interaction.isButton() || add == 'ex'){
            if(type == 'invent'){
                let gItems = []
                let charItems = []
                let roomItems = []

                for(let value of data.split(';')){
                    value = value.split('-') //id –∏ convar

                    let gItem = items.find(fItem => fItem.id == value[0])
                    if(!gItem) throw new Error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                    gItems.push(gItem)

                    let charItem = char.data.items?.find(item => (!value[1] && item.id == gItem.id) || (value[1] && item.id == gItem.id && item.convar == value[1]))
                    if(charItem){
                        charItems.push(charItem)
                    }

                    let roomItem = room.items?.find(item => (!value[1] && item.id == gItem.id) || (value[1] && item.id == gItem.id && item.convar == value[1]))
                    if(roomItem){
                        roomItems.push(roomItem)
                    }
                }

                async function getCount(gItem, item, emoji){
                    try{
                        let count = 1
                        if(item.count > 1){
                            let reply = `> –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ **${gItem.data.emoji} ${gItem.data.name} (–í—Å–µ–≥–æ: ${item.count.toLocaleString('en')})** ${emoji}`

                            ReplyInteraction(interaction, {content: reply, embeds: [], components: []})
                            
                            let filter = message => message.author.id == interaction.user.id
                            let message = await interaction.channel.awaitMessages({filter, max: 1, time: 15000, errors: ['time']})

                            count = parseInt(message.first().content)
                            setTimeout(() => {
                                try{
                                    message.first().delete()
                                }catch(error){
                                    ErrorInteraction(interaction, error, true)
                                }
                            }, timeOfDelete)
                        }
                        return count
                    }catch{
                        throw new Error("–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ —á–∏—Å–ª–∞ –≤—ã—à–ª–æ")
                    }
                }

                if(act == 'use'){
                    if(!charItems.length) throw new Error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –≤–∞—à–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
                    if(gItems[0].data.type == 'key'){
                        let options = RPF.objectsSelectMenuOptions(object, objects, true, true)
                        if(!options.length) throw new Error("–û–±—ä–µ–∫—Ç–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç")

                        let components = RPF.pageButtonsSelectMenu(`invent_key_${data}`, '–û–±—ä–µ–∫—Ç—ã...', options, 'keyuse', 0, data)
                        
                        interaction.update({
                            content: '> –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç üèò',
                            embeds: [],
                            components: components
                        })
                    }
                }else if(act == 'trade'){
                    let filterChars = chars.filter(fChar => players?.find(fPlayer => fPlayer.data.char == fChar.id) && !player.data.chars?.find(fpChar => fpChar == fChar.id) && fChar.data.pos == char.data.pos)
                    let options = RPF.charsSelectMenuOptions(filterChars)
                    if(!options.length) throw new Error("–õ—é–¥–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç")

                    let components = RPF.pageButtonsSelectMenu(`invent_give_${data}_ex`, '–õ—é–¥–∏...', options, 'trade', 0, data)
                    
                    interaction.update({
                        content: '> –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è üë•',
                        embeds: [],
                        components: components
                    })
                }else if(act == 'drop' || act == 'take' || act == 'give'){
                    let dropInfo = []
                    let fArray, lAct, get, main, second
                    main = {path: 'ages/chars', par: 'items', id: char.id, origin: char.data.items}

                    if(act == 'drop'){
                        if(!charItems.length) throw new Error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –≤–∞—à–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
                        fArray = charItems
                        lAct = `> –í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏ üì§`
                        get = false

                        second = {path: 'ages/objects', par: `rooms.${roomId}.items`, id: object.id, origin: room.items}
                    }else if(act == 'take'){
                        if(!roomItems.length) throw new Error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –∫–æ–º–Ω–∞—Ç—ã")
                        fArray = roomItems
                        lAct = `> –í—ã –ø–æ–ª—É—á–∏–ª–∏ üì•`
                        get = true

                        second = {path: 'ages/objects', par: `rooms.${roomId}.items`, id: object.id, origin: room.items} 
                    }else if(act == 'give'){
                        console.log('test')
                        /* if(!charItems.length) throw new Error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –≤–∞—à–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
                        fArray = charItems
                        lAct = `> –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ üì¶`
                        get = false

                        second = {path: 'ages/chars', par: `items`, id: object.id, origin: room.items} */
                    }
                    for(let lItem of fArray){
                        let gItem = gItems.find(fItem => fItem.id == lItem.id)
                        if(!gItem) throw new Error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏")

                        let count = await getCount(gItem, lItem, lAct.slice(-1))

                        if(count != NaN && lItem.count >= count && count > 0){
                            ReplyInteraction(interaction, {content: `> –ü—Ä–æ—Ü–µ—Å—Å... üì¶`, embeds: [], components: []})
                            
                            let action = [
                                RPF.ItemManager(get, main, lItem, count),
                                RPF.ItemManager(!get, second, lItem, count),
                            ]
                            
                            for(let act of action){
                                if(act != true){
                                    throw act
                                }
                            }

                            dropInfo.push(`**${gItem.data.emoji}** ${gItem.data.name} (x${count.toLocaleString('en')})`)
                            
                            setTimeout(() => {
                                try{
                                    if(fArray.indexOf(lItem) == fArray.length - 1){
                                        interaction.editReply(`${lAct}\n${dropInfo.join('\n')}`)
                                    }
                                }catch(error){
                                    ErrorInteraction(interaction, error, true)
                                }
                            }, 2500)
                        }else{
                            throw new Error("–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ")
                        }
                    }
                }
            }else if(type == 'char'){
                if(act == 'use'){
                    let char = chars.find(char => char.id == data)
                    if(!char) throw new Error("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

                    if(!player.data.chars?.find(fChar => fChar == char.id)) throw new Error("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

                    let posObject = objects.find(object => object.id == char.data.pos)
                    if(!posObject) throw new Error("–ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                    let channelPosObject = guild.channels.cache.get(posObject.data.cid)
                    if(!channelPosObject) throw new Error("–ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                    EStats('ages/players', player.id, 'char', [char.id])
                    RPF.step(interaction, player.data.user, char, objects, posObject, channelPosObject)

                    interaction.update({content: `> –í—ã —Å–º–µ–Ω–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ **${char.data.name}** üë§`, embeds: [], components: []})
                }else if(act == 'edit'){
                    let char = chars.find(char => char.id == data)
                    if(!char) throw new Error("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

                    if(!player.data.chars?.find(fChar => fChar == char.id)) throw new Error("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

                    interaction.update({content: `> –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üë§`, embeds: [], components: []})
                    let messageEdit = await interaction.user.send({
                        content: `> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ **${char.data.name}** üë§\n`,
                        embeds: [
                            {
                                description: `–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏`,
                                color: 'RANDOM'
                            }
                        ],
                        components: [
                            {
                                type: 'ACTION_ROW',
                                components: [
                                    {
                                        type: 'BUTTON',
                                        label: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                                        customId: 'char_editStop',
                                        style: 'DANGER'
                                    }
                                ]
                            }
                        ]
                    })
                    
                    let filterMessage = (msg) => msg.author.id == interaction.user.id
                    let stop = false

                    let filterInteraction = (interaction) => interaction.message.id == messageEdit.id

                    let reply = interaction.user.dmChannel.createMessageCollector({filterMessage, max: 1, time: (5*60)*1000, dispose: true})
                    let button = interaction.user.dmChannel.createMessageComponentCollector({filterInteraction, max: 1, time: (5*60)*1000, dispose: true})

                    button.on('collect', (interaction) => {
                        if(interaction.customId == 'char_editStop'){
                            interaction.update({content: `> –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üë§`, embeds: [], components: []})
                            stop = true

                            reply.stop()
                            button.stop()
                        }
                    })

                    reply.on('collect', (message) => {
                        messageEdit.edit({content: `> –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ üë§`, embeds: [], components: []})
                        EStats('ages/chars', char.id, 'desc', [betterLimitText(message.content, 100)])
                        stop = true

                        reply.stop()
                        button.stop()
                    })

                    reply.on('end', () => {
                        if(!stop){
                            messageEdit.edit({content: `> –í—ã—à–ª–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ üë§`, embeds: [], components: []})

                            reply.stop()
                            button.stop()
                        }
                    })
                }else if(act == 'create'){
                    interaction.update({content: `> –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üë§`, embeds: [], components: []})
                    
                    let char = {}

                    let messageEdit = await interaction.user.send({
                        content: `> –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ üë§\n`,
                        embeds: [
                            {
                                description: `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—É`,
                                color: 'RANDOM'
                            }
                        ],
                        components: [
                            {
                                type: 'ACTION_ROW',
                                components: [
                                    {
                                        type: 'BUTTON',
                                        label: '–¢–∞–ª–æ—Ä–∞–Ω (–ß–µ–ª–æ–≤–µ–∫)',
                                        customId: 'char_man',
                                        style: 'SUCCESS'
                                    },
                                    {
                                        type: 'BUTTON',
                                        label: '–ö–∞\'–î–æ—à (–û—Ä–∫)',
                                        customId: 'char_ork',
                                        style: 'DANGER'
                                    },
                                    {
                                        type: 'BUTTON',
                                        label: '–°—É—É–º (–≠–ª—å—Ñ)',
                                        customId: 'char_elf',
                                        style: 'PRIMARY'
                                    },
                                    {
                                        type: 'BUTTON',
                                        label: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ',
                                        customId: 'char_createStop',
                                        style: 'DANGER'
                                    }
                                ]
                            }
                        ]
                    })

                    let filterInteraction = (interaction) => interaction.message.id == messageEdit.id
                    let button = interaction.user.dmChannel.createMessageComponentCollector({filterInteraction, max: 3, time: (5*60)*1000, dispose: true})

                    let filterMessage = (msg) => msg.author.id == interaction.user.id
                    let reply = interaction.user.dmChannel.createMessageCollector({filterMessage, max: 3, time: (5*60)*1000, dispose: true})

                    let stop = false

                    button.on('collect', async (interaction) => {
                        if(interaction.customId == 'char_createStop'){
                            interaction.update({content: `> –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ üë§`, embeds: [], components: []})
                            stop = true

                            reply.stop()
                            button.stop()
                        }else if(interaction.customId == 'char_createDone'){
                            interaction.update({content: `> –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ **${char.name}** üë§`, embeds: [], components: []})

                            char = await AStats('ages/chars', undefined, [char.name, char.race, char.desc, undefined, 1])
                            player.data.chars?.push(char.id)
                            let chars = player.data.chars ?? [char.id]
                            if(!player.data.chars?.find(fChar => fChar.id == char.id)){
                                EStats('ages/players', player.id, 'chars', [chars])
                            }

                            stop = true

                            reply.stop()
                            button.stop()
                        }else{
                            char.race = interaction.customId.split('_')[1]
                            interaction.update({
                                embeds: [
                                    {
                                        description: `–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`,
                                        color: 'RANDOM'
                                    }
                                ],
                                components: [
                                    {
                                        type: 'ACTION_ROW',
                                        components: [
                                            {
                                                type: 'BUTTON',
                                                label: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ',
                                                customId: 'char_createStop',
                                                style: 'DANGER'
                                            }
                                        ]
                                    }
                                ]
                            })
                        }
                    })

                    reply.on('collect', (message) => {
                        if(button.collected.size > 0){
                            if(reply.collected.size == 1){
                                char.name = betterLimitText(message.content, 100)
                                messageEdit.edit({
                                    embeds: [
                                        {
                                            description: `–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`,
                                            color: 'RANDOM'
                                        }
                                    ]
                                })
                            }else if(reply.collected.size == 2){
                                char.desc = betterLimitText(message.content, 100)
                                messageEdit.edit({
                                    embeds: [
                                        {
                                            title: char.name,
                                            description: char.desc,
                                            thumbnail: {url: `https://twemoji.maxcdn.com/v/13.1.0/72x72/1f464.png`},
                                            color: 'RANDOM',
                                        }
                                    ],
                                    components: [
                                        {
                                            type: 'ACTION_ROW',
                                            components: [
                                                {
                                                    type: 'BUTTON',
                                                    label: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                                                    customId: 'char_createDone',
                                                    style: 'SUCCESS'
                                                },
                                                {
                                                    type: 'BUTTON',
                                                    label: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ',
                                                    customId: 'char_createStop',
                                                    style: 'DANGER'
                                                },
                                            ] 
                                        }
                                    ]
                                })
                            }
                        }
                    })

                    reply.on('end', () => {
                        if(!stop){
                            messageEdit.edit({content: `> –í—ã—à–ª–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ üë§`, embeds: [], components: []})

                            reply.stop()
                            button.stop()
                        }
                    })
                }
            }

            if(type == 'page'){
                if(act == 'walk'){
                    let options = RPF.objectsSelectMenuOptions(object, objects, true, false)
                    if(options.length == 0) throw new Error("–û–±—ä–µ–∫—Ç–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç")

                    let components = RPF.pageButtonsSelectMenu('walk_select', '–û–±—ä–µ–∫—Ç—ã...', options, 'walk', parseInt(add))
                    
                    ReplyInteraction(interaction, {
                        content: '> –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üö∂',
                        components: components,
                    })
                }else if(act == 'key'){
                    let options = RPF.objectsSelectMenuOptions(object, objects, true, true)
                    if(options.length == 0) throw new Error("–û–±—ä–µ–∫—Ç–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç")

                    let components = RPF.pageButtonsSelectMenu(`invent_key_${data}`, '–û–±—ä–µ–∫—Ç—ã...', options, 'key', parseInt(add), data)

                    ReplyInteraction(interaction, {
                        content: '> –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç üèò',
                        embeds: [],
                        components: components
                    })
                }else if(act == 'tp'){
                    let options = RPF.objectsSelectMenuOptions(object, objects, false, data != interaction.user.id)
                    if(options.length == 0) throw new Error("–û–±—ä–µ–∫—Ç–æ–≤ –Ω–µ—Ç")

                    let components = RPF.pageButtonsSelectMenu(`tp_select_${data}`, '–û–±—ä–µ–∫—Ç—ã...', options, 'tp', parseInt(add), data)
                    
                    ReplyInteraction(interaction, {
                        content: '> –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üõ∏',
                        components: components,
                        ephemeral: true
                    })
                }else if(act == 'char'){
                    let options = RPF.charsSelectMenuOptions(player.data.chars, player.data.char, chars)
                    if(!options) throw new Error('–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')

                    let components = RPF.pageButtonsSelectMenu('char_select', '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏...', options, 'char', parseInt(add))
                    
                    ReplyInteraction(interaction, {
                        content: '> –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ üë•',
                        components: components,
                        ephemeral: true
                    })
                }
            }
        }
    }catch(error){
        ErrorInteraction(interaction, error, true)
    }
})